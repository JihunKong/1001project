services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: 1001-stories-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env.production.secure  # Use secure environment file
    environment:
      - NODE_ENV=production
      # Remove hardcoded credentials - use env file only
    volumes:
      - ./uploads:/app/uploads:rw
      - ./prisma:/app/prisma:ro
      - ./public/books:/app/public/books:ro
      - app_tmp:/tmp
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:15-alpine
    container_name: 1001-stories-postgres
    restart: unless-stopped
    # SECURITY: Remove external port exposure in production
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}  # From secure env file
      - POSTGRES_DB=stories_db
      - PGDATA=/var/lib/postgresql/data/pgdata
      # Performance and security tuning
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stories_user -d stories_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: [
      "postgres",
      "-c", "config_file=/etc/postgresql/postgresql.conf",
      "-c", "log_statement=all",
      "-c", "log_destination=stderr",
      "-c", "logging_collector=off",
      # Security hardening
      "-c", "ssl=on",
      "-c", "ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem",
      "-c", "ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key"
    ]

  # PgBouncer connection pooler for PostgreSQL
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: 1001-stories-pgbouncer
    restart: unless-stopped
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_USER=${DB_USER}
      - DATABASES_PASSWORD=${DB_PASSWORD}  # From secure env file
      - DATABASES_DBNAME=stories_db
      - POOL_MODE=transaction
      - SERVER_RESET_QUERY=DISCARD ALL
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=20
      - MIN_POOL_SIZE=5
      - RESERVE_POOL_SIZE=5
      - SERVER_LIFETIME=3600
      - SERVER_IDLE_TIMEOUT=600
    volumes:
      - ./postgres/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./postgres/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  redis:
    image: redis:7-alpine
    container_name: 1001-stories-redis
    restart: unless-stopped
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--requirepass", "${REDIS_PASSWORD}",  # From secure env file
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000",
      "--tcp-keepalive", "300",
      "--timeout", "0",
      # Security hardening
      "--protected-mode", "yes",
      "--bind", "0.0.0.0",
      "--port", "6379"
    ]
    volumes:
      - redis_data:/data:rw
    # SECURITY: Remove external port exposure in production
    # ports:
    #   - "6379:6379"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  nginx:
    image: nginx:alpine
    container_name: 1001-stories-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.secure.conf:/etc/nginx/nginx.conf:ro  # Use secure config
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx:rw
      - nginx_cache:/var/cache/nginx:rw
    networks:
      - app-network
    depends_on:
      app:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Security monitoring
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: 1001-stories-fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data:rw
      - ./nginx/logs:/var/log/nginx:ro
    environment:
      - TZ=UTC
      - F2B_LOG_LEVEL=INFO

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-1001stories-secure
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  app_tmp:
    driver: tmpfs
    driver_opts:
      tmpfs-size: 100m
      tmpfs-mode: 1777