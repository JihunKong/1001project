// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE MODELS
// ==========================================

// User model - Core authentication
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  role            UserRole         @default(LEARNER)
  schoolId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
  subscription    Subscription?
  school          School?          @relation(fields: [schoolId], references: [id])
  
  // E-commerce
  cart            Cart?
  orders          Order[]
  reviews         Review[]
  
  // Educational
  enrollments     ClassEnrollment[]
  submissions     Submission[]
  lessonProgress  LessonProgress[]
  teachingClasses Class[]          @relation("TeacherClasses")
  
  // Content
  stories         Story[]
  storySubmissions StorySubmission[]
  translations    Translation[]
  illustrations   Illustration[]
  
  // Reading
  readingProgress ReadingProgress[]
  bookmarks       Bookmark[]
  readingLists    ReadingList[]
  
  // Volunteer
  volunteerApplications VolunteerApplication[]
  volunteerHours  VolunteerHours[]
  volunteerCertificates VolunteerCertificate[]
  coordinatingProjects VolunteerProject[]
  
  // Donations
  donations       Donation[]
  recurringDonations RecurringDonation[]
  
  // System
  notifications   Notification[]
  activityLogs    ActivityLog[]
  
  // CMS Admin
  uploadedMedia   MediaFile[]
  workflowActions WorkflowHistory[]
  bulkImports     BulkImport[]
  
  @@index([email])
  @@index([role])
  @@index([schoolId])
  @@map("users")
}

// User roles
enum UserRole {
  LEARNER
  TEACHER
  INSTITUTION
  VOLUNTEER
  ADMIN
}

// User profile with extended information
model Profile {
  id              String           @id @default(cuid())
  userId          String           @unique
  firstName       String?
  lastName        String?
  organization    String?
  bio             String?          @db.Text
  location        String?
  phone           String?
  dateOfBirth     DateTime?
  language        String           @default("en")
  timezone        String           @default("UTC")
  
  // For teachers/institutions
  teachingLevel   String?
  subjects        String[]
  studentCount    Int?
  
  // For volunteers
  skills          String[]
  availability    String?
  experience      String?          @db.Text
  
  // Preferences
  emailNotifications Boolean       @default(true)
  pushNotifications Boolean        @default(true)
  newsletter      Boolean          @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

// ==========================================
// AUTHENTICATION MODELS (NextAuth)
// ==========================================

// NextAuth Account model (for OAuth providers)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth Verification Token model (for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ==========================================
// SUBSCRIPTION & PREMIUM FEATURES
// ==========================================

// Subscription model for premium features
model Subscription {
  id              String           @id @default(cuid())
  userId          String           @unique
  plan            SubscriptionPlan @default(FREE)
  status          SubscriptionStatus @default(ACTIVE)
  
  // Subscription details
  startDate       DateTime         @default(now())
  endDate         DateTime?
  cancelledAt     DateTime?
  
  // Payment information
  stripeCustomerId     String?     @unique
  stripeSubscriptionId String?     @unique
  stripePriceId        String?
  
  // Features
  maxStudents          Int         @default(30)
  maxDownloads         Int         @default(10)
  canAccessPremium     Boolean     @default(false)
  canDownloadPDF       Boolean     @default(false)
  canCreateClasses     Boolean     @default(false)
  unlimitedReading     Boolean     @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  TRIALING
}

// ==========================================
// E-COMMERCE MODELS
// ==========================================

// Product categories
model Category {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  parentId        String?
  image           String?
  order           Int              @default(0)
  isActive        Boolean          @default(true)
  
  parent          Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]       @relation("CategoryHierarchy")
  products        Product[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("categories")
}

// Physical and digital products for sale
model Product {
  id              String           @id @default(cuid())
  sku             String           @unique
  type            ProductType
  title           String
  description     String           @db.Text
  price           Decimal          @db.Decimal(10, 2)
  compareAtPrice  Decimal?         @db.Decimal(10, 2)
  cost            Decimal?         @db.Decimal(10, 2)
  currency        String           @default("USD")
  weight          Float?
  status          ProductStatus    @default(DRAFT)
  featured        Boolean          @default(false)
  
  // Creator information
  creatorId       String?
  creatorName     String?
  creatorAge      Int?
  creatorLocation String?
  creatorStory    String?          @db.Text
  
  // Categorization
  categoryId      String
  tags            String[]
  
  // Impact metrics
  impactMetric    String?
  impactValue     String?
  
  // Digital product fields
  digitalFileUrl  String?
  downloadLimit   Int?
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Relations
  category        Category         @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  images          ProductImage[]
  inventory       Inventory[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]         @relation("ProductReviews")
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([featured])
  @@map("products")
}

enum ProductType {
  PHYSICAL_BOOK
  DIGITAL_BOOK
  MERCHANDISE
  ARTWORK
  DONATION_ITEM
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

// Product variations (size, color, format)
model ProductVariant {
  id              String           @id @default(cuid())
  productId       String
  title           String
  sku             String           @unique
  price           Decimal          @db.Decimal(10, 2)
  compareAtPrice  Decimal?         @db.Decimal(10, 2)
  inventoryQuantity Int            @default(0)
  weight          Float?
  attributes      Json
  position        Int              @default(0)
  
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory       Inventory[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("product_variants")
}

// Product images
model ProductImage {
  id              String           @id @default(cuid())
  productId       String
  url             String
  alt             String?
  position        Int              @default(0)
  
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@map("product_images")
}

// Stock management for products
model Inventory {
  id              String           @id @default(cuid())
  productId       String
  variantId       String?
  quantity        Int              @default(0)
  reserved        Int              @default(0)
  location        String           @default("main")
  reorderPoint    Int              @default(10)
  reorderQuantity Int              @default(50)
  
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant         ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  updatedAt       DateTime         @updatedAt
  
  @@unique([productId, variantId, location])
  @@map("inventory")
}

// User shopping cart
model Cart {
  id              String           @id @default(cuid())
  userId          String?          @unique
  sessionId       String?
  items           CartItem[]
  expiresAt       DateTime         @default(dbgenerated("NOW() + INTERVAL '7 days'"))
  
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([sessionId])
  @@map("carts")
}

// Individual items in cart
model CartItem {
  id              String           @id @default(cuid())
  cartId          String
  productId       String
  variantId       String?
  quantity        Int              @default(1)
  price           Decimal          @db.Decimal(10, 2)
  
  cart            Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product         Product          @relation(fields: [productId], references: [id])
  variant         ProductVariant?  @relation(fields: [variantId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

// Completed purchases
model Order {
  id              String           @id @default(cuid())
  orderNumber     String           @unique @default(cuid())
  userId          String?
  email           String
  phone           String?
  
  // Financial
  subtotal        Decimal          @db.Decimal(10, 2)
  tax             Decimal          @db.Decimal(10, 2) @default(0)
  shipping        Decimal          @db.Decimal(10, 2) @default(0)
  discount        Decimal          @db.Decimal(10, 2) @default(0)
  total           Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  
  // Status
  status          OrderStatus      @default(PENDING)
  paymentStatus   PaymentStatus    @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Payment
  paymentMethod   String?
  stripePaymentId String?
  
  // Shipping
  shippingAddress Json?
  billingAddress  Json?
  shippingMethod  String?
  trackingNumber  String?
  
  // Additional
  notes           String?          @db.Text
  tags            String[]
  
  // Relations
  user            User?            @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELLED
}

// Products within an order
model OrderItem {
  id              String           @id @default(cuid())
  orderId         String
  productId       String
  variantId       String?
  title           String
  variantTitle    String?
  quantity        Int
  price           Decimal          @db.Decimal(10, 2)
  total           Decimal          @db.Decimal(10, 2)
  fulfillmentStatus String?
  
  order           Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product          @relation(fields: [productId], references: [id])
  variant         ProductVariant?  @relation(fields: [variantId], references: [id])
  
  createdAt       DateTime         @default(now())
  
  @@map("order_items")
}

// ==========================================
// DIGITAL LIBRARY & READING
// ==========================================

// Enhanced story model for digital books
model Story {
  id              String           @id @default(cuid())
  isbn            String?          @unique
  title           String
  subtitle        String?
  content         String           @db.Text
  summary         String?
  
  // Author information
  authorId        String
  authorName      String
  coAuthors       String[]
  authorAge       Int?
  authorLocation  String?
  illustratorId   String?
  
  // Publication details
  publishedDate   DateTime?
  publisher       String?
  language        String           @default("en")
  pageCount       Int?
  readingLevel    String?
  readingTime     Int?             // Estimated minutes
  
  // Categorization
  category        String[]
  genres          String[]
  subjects        String[]
  tags            String[]
  
  // Media
  coverImage      String?
  illustrations   String[]
  samplePdf       String?
  fullPdf         String?
  epubFile        String?
  audioFile       String?
  
  // Access control
  isPremium       Boolean          @default(false)
  isPublished     Boolean          @default(false)
  featured        Boolean          @default(false)
  price           Decimal?         @db.Decimal(10, 2)
  
  // Metrics
  viewCount       Int              @default(0)
  likeCount       Int              @default(0)
  rating          Float?
  
  // Relations
  author          User             @relation(fields: [authorId], references: [id])
  chapters        Chapter[]
  readingProgress ReadingProgress[]
  bookmarks       Bookmark[]
  reviews         Review[]         @relation("StoryReviews")
  translations    Translation[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([isPublished])
  @@index([isPremium])
  @@index([language])
  @@map("stories")
}

// Book chapters for sequential reading
model Chapter {
  id              String           @id @default(cuid())
  storyId         String
  chapterNumber   Int
  title           String
  content         String           @db.Text
  audioUrl        String?
  illustrations   String[]
  readingTime     Int?             // Estimated minutes
  
  story           Story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([storyId, chapterNumber])
  @@map("chapters")
}

// User's reading progress tracking
model ReadingProgress {
  id              String           @id @default(cuid())
  userId          String
  storyId         String
  currentChapter  Int              @default(1)
  currentPage     Int?
  currentPosition String?          // Text position for continue reading
  percentComplete Float            @default(0)
  totalReadingTime Int             @default(0) // Minutes
  lastReadAt      DateTime         @default(now())
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  notes           String[]
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  story           Story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, storyId])
  @@index([userId])
  @@index([lastReadAt])
  @@map("reading_progress")
}

// Saved positions in books
model Bookmark {
  id              String           @id @default(cuid())
  userId          String
  storyId         String
  chapterId       Int?
  position        String           // Text position
  note            String?
  color           String?          // Highlight color
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  story           Story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@map("bookmarks")
}

// User's reading lists/collections
model ReadingList {
  id              String           @id @default(cuid())
  userId          String
  name            String
  description     String?
  isPublic        Boolean          @default(false)
  storyIds        String[]
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([userId])
  @@map("reading_lists")
}

// ==========================================
// EDUCATIONAL SYSTEM
// ==========================================

// Educational classes/courses
model Class {
  id              String           @id @default(cuid())
  code            String           @unique
  name            String
  description     String?          @db.Text
  teacherId       String
  schoolId        String?
  subject         String
  gradeLevel      String
  schedule        Json             // Class schedule
  startDate       DateTime
  endDate         DateTime
  maxStudents     Int              @default(30)
  isActive        Boolean          @default(true)
  settings        Json             // Class settings
  
  teacher         User             @relation("TeacherClasses", fields: [teacherId], references: [id])
  school          School?          @relation(fields: [schoolId], references: [id])
  enrollments     ClassEnrollment[]
  assignments     Assignment[]
  lessons         Lesson[]
  resources       ClassResource[]
  announcements   ClassAnnouncement[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([teacherId])
  @@index([schoolId])
  @@map("classes")
}

// Student-class relationships
model ClassEnrollment {
  id              String           @id @default(cuid())
  classId         String
  studentId       String
  enrolledAt      DateTime         @default(now())
  status          EnrollmentStatus @default(ACTIVE)
  grade           String?
  attendance      Float            @default(100)
  progress        Float            @default(0)
  
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([classId, studentId])
  @@index([studentId])
  @@index([classId])
  @@map("class_enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
}

// Class assignments and homework
model Assignment {
  id              String           @id @default(cuid())
  classId         String
  title           String
  description     String           @db.Text
  type            AssignmentType
  dueDate         DateTime
  points          Int              @default(100)
  resources       String[]
  requirements    Json
  
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  submissions     Submission[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([classId])
  @@index([dueDate])
  @@map("assignments")
}

enum AssignmentType {
  READING
  WRITING
  PROJECT
  QUIZ
  PRESENTATION
  GROUP_WORK
}

// Student assignment submissions
model Submission {
  id              String           @id @default(cuid())
  assignmentId    String
  studentId       String
  submittedAt     DateTime         @default(now())
  content         String?          @db.Text
  attachments     String[]
  grade           Float?
  feedback        String?          @db.Text
  status          SubmissionStatus @default(DRAFT)
  
  assignment      Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([assignmentId, studentId])
  @@index([studentId])
  @@map("submissions")
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
  LATE
}

// Course lessons/modules
model Lesson {
  id              String           @id @default(cuid())
  classId         String
  lessonNumber    Int
  title           String
  objectives      String[]
  content         String           @db.Text
  resources       Json             // Lesson materials
  duration        Int              // Estimated minutes
  
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  progress        LessonProgress[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([classId, lessonNumber])
  @@map("lessons")
}

// Student lesson completion
model LessonProgress {
  id              String           @id @default(cuid())
  lessonId        String
  studentId       String
  startedAt       DateTime         @default(now())
  completedAt     DateTime?
  timeSpent       Int              @default(0) // Minutes
  score           Float?
  
  lesson          Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, studentId])
  @@index([studentId])
  @@map("lesson_progress")
}

// Class resources (materials, documents)
model ClassResource {
  id              String           @id @default(cuid())
  classId         String
  title           String
  description     String?
  type            ResourceType
  url             String
  size            Int?             // File size in bytes
  
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@map("class_resources")
}

enum ResourceType {
  DOCUMENT
  VIDEO
  AUDIO
  IMAGE
  LINK
  PRESENTATION
}

// Class announcements
model ClassAnnouncement {
  id              String           @id @default(cuid())
  classId         String
  title           String
  content         String           @db.Text
  priority        AnnouncementPriority @default(NORMAL)
  
  class           Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@map("class_announcements")
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ==========================================
// SCHOOL MANAGEMENT
// ==========================================

// Educational institutions
model School {
  id              String           @id @default(cuid())
  name            String
  type            SchoolType
  address         Json
  country         String
  phone           String?
  email           String?
  website         String?
  principalName   String?
  studentCount    Int              @default(0)
  teacherCount    Int              @default(0)
  establishedYear Int?
  accreditation   String[]
  partneredAt     DateTime         @default(now())
  status          SchoolStatus     @default(PENDING)
  
  // Relations
  users           User[]
  classes         Class[]
  budgets         Budget[]
  resources       SchoolResource[]
  volunteerAssignments SchoolVolunteer[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("schools")
}

enum SchoolType {
  PRIMARY
  SECONDARY
  HIGH_SCHOOL
  UNIVERSITY
  VOCATIONAL
  SPECIAL_EDUCATION
}

enum SchoolStatus {
  ACTIVE
  PENDING
  INACTIVE
  SUSPENDED
}

// School financial management
model Budget {
  id              String           @id @default(cuid())
  schoolId        String
  year            Int
  totalBudget     Decimal          @db.Decimal(12, 2)
  allocatedBudget Decimal          @db.Decimal(12, 2) @default(0)
  spentBudget     Decimal          @db.Decimal(12, 2) @default(0)
  categories      Json
  
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  items           BudgetItem[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([schoolId, year])
  @@map("budgets")
}

// Budget line items
model BudgetItem {
  id              String           @id @default(cuid())
  budgetId        String
  category        String
  description     String
  amount          Decimal          @db.Decimal(10, 2)
  spent           Decimal          @db.Decimal(10, 2) @default(0)
  vendor          String?
  approvedBy      String?
  approvedAt      DateTime?
  
  budget          Budget           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@map("budget_items")
}

// School educational resources
model SchoolResource {
  id              String           @id @default(cuid())
  schoolId        String
  type            SchoolResourceType
  name            String
  quantity        Int              @default(1)
  condition       String?
  location        String?
  purchaseDate    DateTime?
  value           Decimal?         @db.Decimal(10, 2)
  
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("school_resources")
}

enum SchoolResourceType {
  BOOK
  COMPUTER
  TABLET
  SUPPLIES
  EQUIPMENT
  FURNITURE
  SOFTWARE
}

// School-volunteer assignments
model SchoolVolunteer {
  id              String           @id @default(cuid())
  schoolId        String
  volunteerId     String
  role            String
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean          @default(true)
  
  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([schoolId, volunteerId])
  @@map("school_volunteers")
}

// ==========================================
// VOLUNTEER MANAGEMENT
// ==========================================

// Volunteer opportunities and projects
model VolunteerProject {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  type            VolunteerType
  skills          String[]
  location        String           // Remote or physical location
  timeCommitment  String           // Hours per week
  startDate       DateTime
  endDate         DateTime?
  maxVolunteers   Int
  currentVolunteers Int            @default(0)
  status          ProjectStatus    @default(OPEN)
  impact          String           // Expected impact
  coordinatorId   String
  
  coordinator     User             @relation(fields: [coordinatorId], references: [id])
  applications    VolunteerApplication[]
  hours           VolunteerHours[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([status])
  @@map("volunteer_projects")
}

enum VolunteerType {
  TRANSLATION
  ILLUSTRATION
  TEACHING
  CONTENT_CREATION
  TECHNICAL
  ADMINISTRATIVE
  FUNDRAISING
  OTHER
}

enum ProjectStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Volunteer applications for projects
model VolunteerApplication {
  id              String           @id @default(cuid())
  projectId       String
  volunteerId     String
  motivation      String           @db.Text
  experience      String           @db.Text
  availability    String
  status          ApplicationStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  notes           String?          @db.Text
  
  project         VolunteerProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  volunteer       User             @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([projectId, volunteerId])
  @@map("volunteer_applications")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

// Volunteer time tracking
model VolunteerHours {
  id              String           @id @default(cuid())
  volunteerId     String
  projectId       String
  date            DateTime
  hours           Float
  activity        String           @db.Text
  impact          String?
  verified        Boolean          @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  
  volunteer       User             @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  project         VolunteerProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@index([volunteerId])
  @@index([projectId])
  @@map("volunteer_hours")
}

// Volunteer recognition certificates
model VolunteerCertificate {
  id              String           @id @default(cuid())
  volunteerId     String
  type            CertificateType
  title           String
  description     String           @db.Text
  hoursContributed Float
  projectCount    Int
  issuedDate      DateTime         @default(now())
  certificateUrl  String?
  
  volunteer       User             @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  
  @@map("volunteer_certificates")
}

enum CertificateType {
  PARTICIPATION
  ACHIEVEMENT
  MILESTONE
  EXCELLENCE
  LEADERSHIP
}

// ==========================================
// DONATION SYSTEM
// ==========================================

// Individual donations
model Donation {
  id              String           @id @default(cuid())
  donorId         String?
  campaignId      String?
  amount          Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  type            DonationType     @default(ONE_TIME)
  paymentMethod   String?
  stripePaymentId String?
  anonymous       Boolean          @default(false)
  donorName       String?
  donorEmail      String
  message         String?          @db.Text
  taxDeductible   Boolean          @default(true)
  receiptUrl      String?
  status          DonationStatus   @default(PENDING)
  
  donor           User?            @relation(fields: [donorId], references: [id])
  campaign        DonationCampaign? @relation(fields: [campaignId], references: [id])
  
  createdAt       DateTime         @default(now())
  
  @@index([donorId])
  @@index([campaignId])
  @@index([status])
  @@map("donations")
}

enum DonationType {
  ONE_TIME
  RECURRING
  PLEDGE
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Fundraising campaigns
model DonationCampaign {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  goal            Decimal          @db.Decimal(10, 2)
  raised          Decimal          @db.Decimal(10, 2) @default(0)
  currency        String           @default("USD")
  startDate       DateTime
  endDate         DateTime
  category        String
  beneficiary     String           // Who benefits
  impactStatement String           @db.Text
  images          String[]
  videoUrl        String?
  status          CampaignStatus   @default(DRAFT)
  featured        Boolean          @default(false)
  
  donations       Donation[]
  updates         CampaignUpdate[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([status])
  @@index([featured])
  @@map("donation_campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

// Campaign progress updates
model CampaignUpdate {
  id              String           @id @default(cuid())
  campaignId      String
  title           String
  content         String           @db.Text
  images          String[]
  
  campaign        DonationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@map("campaign_updates")
}

// Subscription donations
model RecurringDonation {
  id              String           @id @default(cuid())
  donorId         String
  amount          Decimal          @db.Decimal(10, 2)
  currency        String           @default("USD")
  frequency       DonationFrequency @default(MONTHLY)
  dayOfMonth      Int?             // For monthly donations
  stripeSubscriptionId String?     @unique
  status          RecurringStatus  @default(ACTIVE)
  startDate       DateTime         @default(now())
  pausedAt        DateTime?
  cancelledAt     DateTime?
  totalContributed Decimal         @db.Decimal(10, 2) @default(0)
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  
  donor           User             @relation(fields: [donorId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([donorId])
  @@index([status])
  @@map("recurring_donations")
}

enum DonationFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum RecurringStatus {
  ACTIVE
  PAUSED
  CANCELLED
  FAILED
}

// ==========================================
// CONTENT MANAGEMENT
// ==========================================

// User story submissions
model StorySubmission {
  id              String           @id @default(cuid())
  authorId        String
  title           String
  content         String           @db.Text
  summary         String?          @db.Text
  language        String
  category        String
  ageGroup        String
  status          StorySubmissionStatus @default(DRAFT)
  priority        Priority         @default(MEDIUM)
  reviewerId      String?
  assigneeId      String?
  dueDate         DateTime?
  reviewNotes     String?          @db.Text
  editorialNotes  String?          @db.Text
  publishDate     DateTime?
  compensation    Decimal?         @db.Decimal(10, 2)
  tags            String[]
  
  // Media files
  coverImageId    String?
  attachments     String[]
  
  author          User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coverImage      MediaFile?       @relation(fields: [coverImageId], references: [id])
  workflowHistory WorkflowHistory[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@map("story_submissions")
}

enum StorySubmissionStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

// Story translations
model Translation {
  id              String           @id @default(cuid())
  storyId         String
  translatorId    String
  fromLanguage    String
  toLanguage      String
  title           String
  content         String           @db.Text
  status          TranslationStatus @default(IN_PROGRESS)
  qualityScore    Float?
  reviewerId      String?
  reviewNotes     String?          @db.Text
  
  story           Story            @relation(fields: [storyId], references: [id], onDelete: Cascade)
  translator      User             @relation(fields: [translatorId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([storyId, toLanguage])
  @@index([status])
  @@map("translations")
}

enum TranslationStatus {
  IN_PROGRESS
  REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

// Story illustrations
model Illustration {
  id              String           @id @default(cuid())
  storyId         String
  artistId        String
  title           String
  description     String?
  fileUrl         String
  thumbnailUrl    String?
  position        Int?
  status          IllustrationStatus @default(DRAFT)
  compensation    Decimal?         @db.Decimal(10, 2)
  license         String
  
  artist          User             @relation(fields: [artistId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("illustrations")
}

enum IllustrationStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PUBLISHED
  REJECTED
}

// Content reviews and ratings
model Review {
  id              String           @id @default(cuid())
  userId          String
  contentType     ContentType
  contentId       String
  rating          Int              // 1-5 stars
  title           String?
  comment         String?          @db.Text
  helpful         Int              @default(0)
  verified        Boolean          @default(false)
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product?         @relation("ProductReviews", fields: [contentId], references: [id], onDelete: Cascade, map: "reviews_product_contentId_fkey")
  story           Story?           @relation("StoryReviews", fields: [contentId], references: [id], onDelete: Cascade, map: "reviews_story_contentId_fkey")
  
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([contentType, contentId])
  @@map("reviews")
}

enum ContentType {
  BOOK
  PRODUCT
  STORY
  COURSE
}

// ==========================================
// SYSTEM MODELS
// ==========================================

// User notifications
model Notification {
  id              String           @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  data            Json?
  read            Boolean          @default(false)
  readAt          DateTime?
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@index([userId, read])
  @@map("notifications")
}

enum NotificationType {
  SYSTEM
  ORDER
  ASSIGNMENT
  CLASS
  DONATION
  VOLUNTEER
  ACHIEVEMENT
}

// Activity logging
model ActivityLog {
  id              String           @id @default(cuid())
  userId          String
  action          String
  entity          String
  entityId        String
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([entity, entityId])
  @@map("activity_logs")
}

// ==========================================
// CMS ADMIN MODELS
// ==========================================

// Priority levels for tasks and submissions
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Media file library for CMS
model MediaFile {
  id              String           @id @default(cuid())
  filename        String
  originalName    String
  mimeType        String
  size            Int              // File size in bytes
  url             String
  thumbnailUrl    String?
  altText         String?
  description     String?
  
  // Image processing details
  width           Int?
  height          Int?
  format          String?
  
  // Organization
  folder          String           @default("/")
  tags            String[]
  
  // Relationships
  uploadedById    String
  uploadedBy      User             @relation(fields: [uploadedById], references: [id])
  storySubmissions StorySubmission[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([uploadedById])
  @@index([mimeType])
  @@index([folder])
  @@map("media_files")
}

// Workflow history tracking for story submissions
model WorkflowHistory {
  id              String           @id @default(cuid())
  storySubmissionId String
  fromStatus      StorySubmissionStatus?
  toStatus        StorySubmissionStatus
  comment         String?          @db.Text
  performedById   String
  metadata        Json?
  
  storySubmission StorySubmission  @relation(fields: [storySubmissionId], references: [id], onDelete: Cascade)
  performedBy     User             @relation(fields: [performedById], references: [id])
  
  createdAt       DateTime         @default(now())
  
  @@index([storySubmissionId])
  @@index([performedById])
  @@map("workflow_history")
}

// Bulk import tracking for CSV/Excel uploads
model BulkImport {
  id              String           @id @default(cuid())
  filename        String
  originalName    String
  fileUrl         String
  type            ImportType
  status          ImportStatus     @default(PENDING)
  
  // Processing details
  totalRows       Int              @default(0)
  processedRows   Int              @default(0)
  successfulRows  Int              @default(0)
  errorRows       Int              @default(0)
  
  // Results
  errors          Json?            // Array of error details
  summary         Json?            // Import summary
  
  // Relations
  uploadedById    String
  uploadedBy      User             @relation(fields: [uploadedById], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([uploadedById])
  @@index([status])
  @@map("bulk_imports")
}

enum ImportType {
  STORIES
  TRANSLATIONS
  USERS
  MEDIA
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}