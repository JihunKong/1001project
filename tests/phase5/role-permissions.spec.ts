import { test, expect } from '@playwright/test';\n\n// Define role-based test scenarios\nconst ROLE_CONFIGS = {\n  LEARNER: {\n    email: 'learner@test.com',\n    allowedPaths: ['/dashboard/learner', '/library', '/esl'],\n    restrictedPaths: ['/dashboard/volunteer/submit', '/dashboard/story-manager', '/admin'],\n    canSubmitStories: false,\n    canReviewStories: false,\n    canAccessLibrary: true,\n    canUseESLReader: true\n  },\n  VOLUNTEER: {\n    email: 'volunteer@test.com',\n    allowedPaths: ['/dashboard/volunteer', '/dashboard/volunteer/submit', '/library'],\n    restrictedPaths: ['/dashboard/story-manager', '/dashboard/learner', '/admin'],\n    canSubmitStories: true,\n    canReviewStories: false,\n    canAccessLibrary: true,\n    canUseESLReader: false\n  },\n  TEACHER: {\n    email: 'teacher@test.com',\n    allowedPaths: ['/dashboard/teacher', '/dashboard/volunteer/submit', '/library'],\n    restrictedPaths: ['/dashboard/story-manager', '/admin'],\n    canSubmitStories: true,\n    canReviewStories: false,\n    canAccessLibrary: true,\n    canUseESLReader: true,\n    canManageClasses: true\n  },\n  STORY_MANAGER: {\n    email: 'story-manager@test.com',\n    allowedPaths: ['/dashboard/story-manager', '/dashboard/story-manager/review', '/library'],\n    restrictedPaths: ['/admin', '/dashboard/volunteer/submit'],\n    canSubmitStories: false,\n    canReviewStories: true,\n    canAccessLibrary: true,\n    canUseESLReader: false\n  },\n  CONTENT_ADMIN: {\n    email: 'content-admin@test.com',\n    allowedPaths: ['/dashboard/content-admin', '/library', '/dashboard/story-manager'],\n    restrictedPaths: ['/admin'],\n    canSubmitStories: false,\n    canReviewStories: true,\n    canAccessLibrary: true,\n    canUseESLReader: false,\n    canFinalApprove: true\n  },\n  ADMIN: {\n    email: 'admin@test.com',\n    allowedPaths: ['/admin', '/dashboard/content-admin', '/library'],\n    restrictedPaths: [],\n    canSubmitStories: false,\n    canReviewStories: true,\n    canAccessLibrary: true,\n    canUseESLReader: false,\n    canManageUsers: true,\n    canAccessAllFeatures: true\n  }\n};\n\ntest.describe('Phase 5: Multi-Role Permission Testing', () => {\n  // Test each role's access permissions\n  Object.entries(ROLE_CONFIGS).forEach(([role, config]) => {\n    test.describe(`${role} Role Permissions`, () => {\n      test.beforeEach(async ({ page }) => {\n        // Mock authentication for specific role\n        await page.addInitScript((roleData) => {\n          window.localStorage.setItem('next-auth.session-token', `mock-${roleData.role.toLowerCase()}-session`);\n          // Mock session data\n          window.mockSession = {\n            user: {\n              id: `test-${roleData.role.toLowerCase()}-id`,\n              email: roleData.config.email,\n              role: roleData.role,\n              name: `Test ${roleData.role}`\n            }\n          };\n        }, { role, config });\n        \n        // Mock session API\n        await page.route('/api/auth/session', route => {\n          route.fulfill({\n            status: 200,\n            contentType: 'application/json',\n            body: JSON.stringify({\n              user: {\n                id: `test-${role.toLowerCase()}-id`,\n                email: config.email,\n                role: role,\n                name: `Test ${role}`\n              }\n            })\n          });\n        });\n      });\n\n      test(`should allow access to permitted paths for ${role}`, async ({ page }) => {\n        for (const allowedPath of config.allowedPaths) {\n          console.log(`Testing ${role} access to: ${allowedPath}`);\n          \n          try {\n            await page.goto(allowedPath);\n            await page.waitForLoadState('networkidle', { timeout: 10000 });\n            \n            // Should not be redirected to login or unauthorized page\n            const currentUrl = page.url();\n            expect(currentUrl).not.toContain('/login');\n            expect(currentUrl).not.toContain('/unauthorized');\n            expect(currentUrl).not.toContain('/403');\n            \n            console.log(`✅ ${role} can access ${allowedPath}`);\n          } catch (error) {\n            console.log(`⚠️  ${role} access to ${allowedPath} resulted in: ${error.message}`);\n          }\n        }\n      });\n\n      test(`should restrict access to forbidden paths for ${role}`, async ({ page }) => {\n        for (const restrictedPath of config.restrictedPaths) {\n          console.log(`Testing ${role} restriction for: ${restrictedPath}`);\n          \n          await page.goto(restrictedPath);\n          await page.waitForLoadState('networkidle', { timeout: 5000 });\n          \n          const currentUrl = page.url();\n          \n          // Should be redirected away from restricted path\n          const isRestricted = currentUrl.includes('/login') || \n                              currentUrl.includes('/unauthorized') || \n                              currentUrl.includes('/dashboard') && !currentUrl.includes(restrictedPath) ||\n                              currentUrl.includes('/403');\n          \n          expect(isRestricted).toBe(true);\n          console.log(`✅ ${role} correctly restricted from ${restrictedPath}`);\n        }\n      });\n\n      if (config.canSubmitStories) {\n        test(`should allow ${role} to submit stories`, async ({ page }) => {\n          await page.goto('/dashboard/volunteer/submit');\n          await page.waitForLoadState('networkidle');\n          \n          // Check for story submission form\n          const titleInput = page.locator('input[name=\"title\"], input[placeholder*=\"title\" i]');\n          const contentArea = page.locator('textarea[name=\"content\"], .markdown-editor textarea');\n          const submitButton = page.locator('button[type=\"submit\"], button').filter({ hasText: /submit/i });\n          \n          await expect(titleInput).toBeVisible();\n          await expect(contentArea).toBeVisible();\n          await expect(submitButton).toBeVisible();\n          \n          console.log(`✅ ${role} can access story submission form`);\n        });\n      } else {\n        test(`should prevent ${role} from submitting stories`, async ({ page }) => {\n          await page.goto('/dashboard/volunteer/submit');\n          await page.waitForLoadState('networkidle');\n          \n          const currentUrl = page.url();\n          const isRestricted = !currentUrl.includes('/submit') || \n                              currentUrl.includes('/login') || \n                              currentUrl.includes('/unauthorized');\n          \n          expect(isRestricted).toBe(true);\n          console.log(`✅ ${role} correctly prevented from story submission`);\n        });\n      }\n\n      if (config.canReviewStories) {\n        test(`should allow ${role} to review stories`, async ({ page }) => {\n          // Mock story manager dashboard with pending submissions\n          await page.route('/api/story-manager/text-submissions*', route => {\n            route.fulfill({\n              status: 200,\n              contentType: 'application/json',\n              body: JSON.stringify({\n                success: true,\n                submissions: [\n                  {\n                    id: 'test-submission-1',\n                    title: 'Test Story for Review',\n                    status: 'PENDING',\n                    author: { name: 'Test Author' },\n                    createdAt: new Date().toISOString()\n                  }\n                ]\n              })\n            });\n          });\n          \n          await page.goto('/dashboard/story-manager');\n          await page.waitForLoadState('networkidle');\n          \n          // Should see review interface\n          const reviewElements = page.locator('.review, .submission, .pending');\n          const hasReviewAccess = await reviewElements.count() > 0 || \n                                  await page.locator('text=/review|submissions|pending/i').count() > 0;\n          \n          expect(hasReviewAccess).toBe(true);\n          console.log(`✅ ${role} can access story review interface`);\n        });\n      } else {\n        test(`should prevent ${role} from reviewing stories`, async ({ page }) => {\n          await page.goto('/dashboard/story-manager');\n          await page.waitForLoadState('networkidle');\n          \n          const currentUrl = page.url();\n          const isRestricted = !currentUrl.includes('/story-manager') || \n                              currentUrl.includes('/login') || \n                              currentUrl.includes('/unauthorized');\n          \n          expect(isRestricted).toBe(true);\n          console.log(`✅ ${role} correctly prevented from story review`);\n        });\n      }\n\n      if (config.canAccessLibrary) {\n        test(`should allow ${role} to access library`, async ({ page }) => {\n          await page.goto('/library');\n          await page.waitForLoadState('networkidle');\n          \n          const currentUrl = page.url();\n          expect(currentUrl).toContain('/library');\n          \n          // Check for library content\n          const libraryContent = page.locator('.library, .books, .stories, h1').filter({ hasText: /library/i });\n          await expect(libraryContent.first()).toBeVisible();\n          \n          console.log(`✅ ${role} can access library`);\n        });\n      }\n\n      if (config.canUseESLReader) {\n        test(`should allow ${role} to use ESL reader`, async ({ page }) => {\n          // Mock ESL story\n          await page.route('/api/esl/text-stories/*', route => {\n            route.fulfill({\n              status: 200,\n              contentType: 'application/json',\n              body: JSON.stringify({\n                success: true,\n                story: {\n                  id: 'test-story',\n                  title: 'Test ESL Story',\n                  contentMd: 'This is a test story for ESL learning.'\n                }\n              })\n            });\n          });\n          \n          await page.goto('/esl/story/test-story');\n          await page.waitForLoadState('networkidle');\n          \n          const currentUrl = page.url();\n          expect(currentUrl).toContain('/esl/story');\n          \n          // Check for ESL reader interface\n          const eslContent = page.locator('.story-content, .text-reader, .esl-reader');\n          await expect(eslContent.first()).toBeVisible();\n          \n          console.log(`✅ ${role} can access ESL reader`);\n        });\n      }\n\n      if (config.canManageClasses) {\n        test(`should allow ${role} to manage classes`, async ({ page }) => {\n          await page.goto('/dashboard/teacher');\n          await page.waitForLoadState('networkidle');\n          \n          // Look for class management features\n          const classFeatures = page.locator(\n            'button, a, .class-management'\n          ).filter({ hasText: /class|student|assign/i });\n          \n          const hasClassManagement = await classFeatures.count() > 0;\n          expect(hasClassManagement).toBe(true);\n          \n          console.log(`✅ ${role} can manage classes`);\n        });\n      }\n\n      if (config.canFinalApprove) {\n        test(`should allow ${role} to perform final approval`, async ({ page }) => {\n          await page.goto('/dashboard/content-admin');\n          await page.waitForLoadState('networkidle');\n          \n          // Look for final approval features\n          const approvalFeatures = page.locator(\n            'button, .approval'\n          ).filter({ hasText: /approve|publish|final/i });\n          \n          const hasApprovalAccess = await approvalFeatures.count() > 0;\n          expect(hasApprovalAccess).toBe(true);\n          \n          console.log(`✅ ${role} can perform final approval`);\n        });\n      }\n\n      if (config.canManageUsers) {\n        test(`should allow ${role} to manage users`, async ({ page }) => {\n          await page.goto('/admin');\n          await page.waitForLoadState('networkidle');\n          \n          // Look for user management features\n          const userFeatures = page.locator(\n            'button, a, .user-management'\n          ).filter({ hasText: /user|manage|admin/i });\n          \n          const hasUserManagement = await userFeatures.count() > 0;\n          expect(hasUserManagement).toBe(true);\n          \n          console.log(`✅ ${role} can manage users`);\n        });\n      }\n    });\n  });\n\n  test('should handle role transitions correctly', async ({ page }) => {\n    // Test transitioning between different roles in the same session\n    const roles = ['VOLUNTEER', 'STORY_MANAGER', 'LEARNER'];\n    \n    for (let i = 0; i < roles.length; i++) {\n      const role = roles[i];\n      const config = ROLE_CONFIGS[role as keyof typeof ROLE_CONFIGS];\n      \n      // Mock new role session\n      await page.addInitScript((roleData) => {\n        window.localStorage.setItem('next-auth.session-token', `mock-${roleData.role.toLowerCase()}-session`);\n      }, { role, config });\n      \n      await page.route('/api/auth/session', route => {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            user: {\n              id: `test-${role.toLowerCase()}-id`,\n              email: config.email,\n              role: role,\n              name: `Test ${role}`\n            }\n          })\n        });\n      });\n      \n      // Navigate to role-appropriate dashboard\n      const firstAllowedPath = config.allowedPaths[0];\n      await page.goto(firstAllowedPath);\n      await page.waitForLoadState('networkidle');\n      \n      const currentUrl = page.url();\n      expect(currentUrl).not.toContain('/login');\n      \n      console.log(`✅ Successfully transitioned to ${role} role`);\n    }\n  });\n\n  test('should enforce API endpoint permissions', async ({ page }) => {\n    const apiTests = [\n      {\n        role: 'LEARNER',\n        endpoint: '/api/submissions/text',\n        method: 'POST',\n        shouldAllow: false\n      },\n      {\n        role: 'VOLUNTEER',\n        endpoint: '/api/submissions/text',\n        method: 'POST',\n        shouldAllow: true\n      },\n      {\n        role: 'STORY_MANAGER',\n        endpoint: '/api/story-manager/text-submissions/test/review',\n        method: 'POST',\n        shouldAllow: true\n      },\n      {\n        role: 'LEARNER',\n        endpoint: '/api/story-manager/text-submissions/test/review',\n        method: 'POST',\n        shouldAllow: false\n      }\n    ];\n    \n    for (const apiTest of apiTests) {\n      // Mock authentication for role\n      await page.addInitScript((roleData) => {\n        window.localStorage.setItem('next-auth.session-token', `mock-${roleData.toLowerCase()}-session`);\n      }, apiTest.role);\n      \n      // Test API endpoint access\n      const response = await page.evaluate(async (testData) => {\n        try {\n          const result = await fetch(testData.endpoint, {\n            method: testData.method,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ test: 'data' })\n          });\n          \n          return {\n            status: result.status,\n            ok: result.ok\n          };\n        } catch (error) {\n          return {\n            status: 500,\n            ok: false,\n            error: error.message\n          };\n        }\n      }, apiTest);\n      \n      if (apiTest.shouldAllow) {\n        expect([200, 400, 404]).toContain(response.status); // Allowed, but might have validation errors\n        expect(response.status).not.toBe(401); // Should not be unauthorized\n        expect(response.status).not.toBe(403); // Should not be forbidden\n      } else {\n        expect([401, 403]).toContain(response.status); // Should be unauthorized or forbidden\n      }\n      \n      console.log(`API test: ${apiTest.role} -> ${apiTest.endpoint} = ${response.status}`);\n    }\n  });\n\n  test('should maintain consistent navigation based on roles', async ({ page }) => {\n    const navigationTests = [\n      {\n        role: 'LEARNER',\n        expectedNavItems: ['Dashboard', 'Library', 'ESL Reader'],\n        notExpectedNavItems: ['Submit Story', 'Review Stories', 'Admin']\n      },\n      {\n        role: 'VOLUNTEER',\n        expectedNavItems: ['Dashboard', 'Submit Story', 'Library'],\n        notExpectedNavItems: ['Review Stories', 'Admin', 'ESL Reader']\n      },\n      {\n        role: 'STORY_MANAGER',\n        expectedNavItems: ['Dashboard', 'Review Stories', 'Library'],\n        notExpectedNavItems: ['Submit Story', 'Admin', 'ESL Reader']\n      }\n    ];\n    \n    for (const navTest of navigationTests) {\n      const config = ROLE_CONFIGS[navTest.role as keyof typeof ROLE_CONFIGS];\n      \n      // Mock role session\n      await page.addInitScript((roleData) => {\n        window.localStorage.setItem('next-auth.session-token', `mock-${roleData.role.toLowerCase()}-session`);\n      }, { role: navTest.role, config });\n      \n      await page.route('/api/auth/session', route => {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            user: {\n              id: `test-${navTest.role.toLowerCase()}-id`,\n              email: config.email,\n              role: navTest.role,\n              name: `Test ${navTest.role}`\n            }\n          })\n        });\n      });\n      \n      // Navigate to dashboard\n      await page.goto('/dashboard');\n      await page.waitForLoadState('networkidle');\n      \n      // Check navigation items\n      const navigation = page.locator('nav, .navigation, .nav-menu, .menu');\n      \n      if (await navigation.count() > 0) {\n        for (const expectedItem of navTest.expectedNavItems) {\n          const navItem = navigation.locator(`text=${expectedItem}`);\n          if (await navItem.count() > 0) {\n            console.log(`✅ ${navTest.role} can see ${expectedItem} in navigation`);\n          }\n        }\n        \n        for (const notExpectedItem of navTest.notExpectedNavItems) {\n          const navItem = navigation.locator(`text=${notExpectedItem}`);\n          const itemCount = await navItem.count();\n          expect(itemCount).toBe(0);\n          console.log(`✅ ${navTest.role} correctly cannot see ${notExpectedItem} in navigation`);\n        }\n      } else {\n        console.log(`ℹ️  Navigation menu not found for ${navTest.role}`);\n      }\n    }\n  });\n\n  test('should handle unauthorized access attempts gracefully', async ({ page }) => {\n    // Test unauthenticated access\n    await page.goto('/dashboard/story-manager');\n    await page.waitForLoadState('networkidle');\n    \n    const currentUrl = page.url();\n    expect(currentUrl).toContain('/login');\n    console.log('✅ Unauthenticated user redirected to login');\n    \n    // Test cross-role access attempts\n    await page.addInitScript(() => {\n      window.localStorage.setItem('next-auth.session-token', 'mock-learner-session');\n    });\n    \n    await page.route('/api/auth/session', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          user: {\n            id: 'test-learner-id',\n            email: 'learner@test.com',\n            role: 'LEARNER',\n            name: 'Test Learner'\n          }\n        })\n      });\n    });\n    \n    // Learner trying to access story manager dashboard\n    await page.goto('/dashboard/story-manager');\n    await page.waitForLoadState('networkidle');\n    \n    const finalUrl = page.url();\n    expect(finalUrl).not.toContain('/story-manager');\n    console.log('✅ Cross-role access properly restricted');\n  });\n});