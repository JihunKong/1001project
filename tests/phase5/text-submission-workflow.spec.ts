import { test, expect } from '@playwright/test';\nimport { VolunteerSubmissionPage } from './page-objects/VolunteerSubmissionPage';\n\nconst TEST_STORY_DATA = {\n  title: 'The Brave Little Seed',\n  content: `Once upon a time, in a small garden behind a cozy house, there lived a tiny seed named Sam. Sam was different from all the other seeds in the garden - he was smaller, quieter, and often felt unsure about himself.\n\nOne spring morning, the gardener came and planted all the seeds in neat rows. \"Grow big and strong!\" she said with a smile. All the seeds were excited, except for Sam, who worried he wasn't good enough.\n\nDays passed, and Sam watched as his friends sprouted into beautiful plants. There was Lily, who became a tall sunflower, and Rose, who bloomed with the prettiest red petals. Sam remained small and hidden in the soil.\n\n\"Maybe I'm just not meant to grow,\" Sam thought sadly.\n\nBut an old oak tree nearby heard his worries. \"Little seed,\" the oak whispered, \"every plant has its own special time and purpose. Don't give up on yourself.\"\n\nSam decided to keep trying. He pushed a little harder each day, reaching for the sunlight. Slowly, very slowly, a tiny green shoot appeared.\n\nWeeks later, Sam had grown into something magical - a small but incredibly fragrant herb garden. The gardener was delighted! \"This is exactly what I needed for my kitchen,\" she said. \"These herbs will make all my cooking special.\"\n\nSam realized that being different didn't mean being less important. He had his own unique gift to share with the world.\n\nFrom that day forward, whenever Sam felt small or different, he remembered that everyone has their own special purpose and timing. The most important thing is to never give up on yourself.`,\n  summary: 'A heartwarming story about a little seed who learns that being different is actually a gift, and that everyone has their own special purpose and timing in life.',\n  language: 'English',\n  ageGroup: '6-8 years',\n  category: 'Life Lessons',\n  tags: ['self-confidence', 'perseverance', 'individuality', 'growth']\n};\n\nconst SHORT_STORY_DATA = {\n  title: 'Quick Test Story',\n  content: 'This is a short story for testing purposes. It has just enough content to be valid.',\n  summary: 'A short test story',\n  language: 'English',\n  ageGroup: '6-8 years'\n};\n\ntest.describe('Phase 5: Text Story Submission Workflow', () => {\n  let submissionPage: VolunteerSubmissionPage;\n\n  test.beforeEach(async ({ page }) => {\n    submissionPage = new VolunteerSubmissionPage(page);\n    \n    // Mock authentication for volunteer role\n    await page.addInitScript(() => {\n      window.localStorage.setItem('next-auth.session-token', 'mock-volunteer-session');\n    });\n    \n    // Navigate to submission page\n    await submissionPage.navigateTo();\n    await submissionPage.waitForPageLoad();\n  });\n\n  test('should load volunteer submission page correctly', async () => {\n    // Verify page elements are present\n    await expect(submissionPage.pageTitle).toBeVisible();\n    await expect(submissionPage.titleInput).toBeVisible();\n    await expect(submissionPage.contentTextarea).toBeVisible();\n    await expect(submissionPage.submitButton).toBeVisible();\n    \n    // Verify writing tips are displayed\n    await submissionPage.verifyWritingTips();\n  });\n\n  test('should complete full text story submission successfully', async () => {\n    // Fill out the complete story form\n    await submissionPage.fillStoryForm(TEST_STORY_DATA);\n    \n    // Verify form is filled correctly\n    await expect(submissionPage.titleInput).toHaveValue(TEST_STORY_DATA.title);\n    await expect(submissionPage.contentTextarea).toContainText(TEST_STORY_DATA.content);\n    \n    // Submit the story\n    await submissionPage.submitStory();\n    \n    // Verify successful submission\n    await submissionPage.verifySubmissionSuccess();\n  });\n\n  test('should save draft functionality work correctly', async () => {\n    // Fill partial form data\n    await submissionPage.titleInput.fill(TEST_STORY_DATA.title);\n    await submissionPage.contentTextarea.fill(TEST_STORY_DATA.content.substring(0, 100));\n    \n    // Save as draft\n    await submissionPage.saveDraft();\n    \n    // Verify draft is saved (check for auto-save indicator or success message)\n    const draftSaved = await submissionPage.verifyAutoSave();\n    expect(draftSaved).toBeTruthy();\n  });\n\n  test('should toggle preview mode correctly', async () => {\n    // Fill form with test data\n    await submissionPage.fillStoryForm(SHORT_STORY_DATA);\n    \n    // Toggle to preview mode\n    await submissionPage.togglePreview();\n    \n    // Verify preview mode is active\n    await submissionPage.verifyPreviewMode();\n    \n    // Verify content is displayed in preview\n    await expect(submissionPage.previewTitle).toContainText(SHORT_STORY_DATA.title);\n    await expect(submissionPage.previewContent).toContainText(SHORT_STORY_DATA.content);\n    \n    // Toggle back to edit mode\n    await submissionPage.togglePreview();\n    \n    // Verify we're back in edit mode\n    await expect(submissionPage.titleInput).toBeVisible();\n  });\n\n  test('should display existing submissions in sidebar', async () => {\n    // Refresh submissions list\n    await submissionPage.refreshSubmissionsButton.click();\n    await submissionPage.page.waitForTimeout(1000);\n    \n    // Check if submissions list is visible\n    await expect(submissionPage.existingSubmissionsList).toBeVisible();\n    \n    // If there are submissions, verify they have required elements\n    const submissionCount = await submissionPage.existingSubmissionsList.locator('.submission-item, .border').count();\n    \n    if (submissionCount > 0) {\n      const firstSubmission = submissionPage.existingSubmissionsList.locator('.submission-item, .border').first();\n      await expect(firstSubmission).toContainText(/\\w+/); // Should have some text content\n    }\n  });\n\n  test('should validate required fields', async () => {\n    // Try to submit empty form\n    await submissionPage.submitButton.click();\n    \n    // Should show validation errors\n    await submissionPage.verifyFormValidation();\n  });\n\n  test('should handle auto-save during composition', async ({ page }) => {\n    // Fill title to trigger auto-save\n    await submissionPage.titleInput.fill('Auto-save Test Story');\n    \n    // Add some content\n    await submissionPage.contentTextarea.fill('This is test content for auto-save functionality.');\n    \n    // Wait for potential auto-save\n    await page.waitForTimeout(3000);\n    \n    // Check if auto-save indicator appeared\n    const hasAutoSave = await submissionPage.verifyAutoSave();\n    \n    // Auto-save may or may not be implemented, so we don't fail the test\n    // but we log the result for reporting\n    console.log('Auto-save functionality detected:', hasAutoSave);\n  });\n\n  test('should track word count for content', async () => {\n    // Add content with known word count\n    const testContent = 'One two three four five six seven eight nine ten';\n    await submissionPage.contentTextarea.fill(testContent);\n    \n    // Get word count\n    const wordCount = await submissionPage.getWordCount();\n    expect(wordCount).toBe(10);\n  });\n\n  test('should handle long content submission', async () => {\n    // Create a long story (but not too long to avoid timeouts)\n    const longStoryData = {\n      ...TEST_STORY_DATA,\n      title: 'Long Story Test',\n      content: TEST_STORY_DATA.content.repeat(3) // Triple the content\n    };\n    \n    // Fill and submit long form\n    await submissionPage.fillStoryForm(longStoryData);\n    \n    // Verify character/word count handling\n    await submissionPage.verifyCharacterCount();\n    \n    // Submit the long story\n    await submissionPage.submitStory();\n    \n    // Should handle long content without errors\n    await submissionPage.verifySubmissionSuccess();\n  });\n\n  test('should persist form data during session', async ({ page }) => {\n    // Fill form with test data\n    await submissionPage.fillStoryForm(SHORT_STORY_DATA);\n    \n    // Navigate away (but stay in same session)\n    await page.goBack();\n    \n    // Navigate back to submission page\n    await submissionPage.navigateTo();\n    await submissionPage.waitForPageLoad();\n    \n    // Check if form data is preserved (this depends on implementation)\n    // We'll check but not fail if not implemented\n    const titleValue = await submissionPage.titleInput.inputValue();\n    const contentValue = await submissionPage.contentTextarea.inputValue();\n    \n    console.log('Form persistence check - Title:', titleValue, 'Content length:', contentValue.length);\n  });\n\n  test('should show submission in queue after submission', async () => {\n    // Submit a story first\n    await submissionPage.fillStoryForm({\n      ...SHORT_STORY_DATA,\n      title: `Test Story ${Date.now()}` // Unique title\n    });\n    \n    await submissionPage.submitStory();\n    await submissionPage.verifySubmissionSuccess();\n    \n    // Navigate back to submissions page\n    await submissionPage.navigateTo();\n    await submissionPage.waitForPageLoad();\n    \n    // Verify the submitted story appears in the list\n    const uniqueTitle = `Test Story ${Date.now()}`;\n    try {\n      await submissionPage.verifySubmissionInList(uniqueTitle);\n      \n      // Check the status\n      const status = await submissionPage.getSubmissionStatus(uniqueTitle);\n      expect(status).toMatch(/SUBMITTED|PENDING|DRAFT/i);\n    } catch (error) {\n      console.log('Note: Submission may not immediately appear in list due to async processing');\n    }\n  });\n\n  test('should handle network errors gracefully', async ({ page }) => {\n    // Fill form\n    await submissionPage.fillStoryForm(SHORT_STORY_DATA);\n    \n    // Simulate network error by intercepting the request\n    await page.route('/api/submissions/text', route => {\n      route.fulfill({\n        status: 500,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Internal server error' })\n      });\n    });\n    \n    // Try to submit\n    await submissionPage.submitButton.click();\n    \n    // Should show error message\n    await expect(submissionPage.errorMessage).toBeVisible();\n  });\n\n  test('should maintain responsive design on different screen sizes', async ({ page }) => {\n    // Test tablet view\n    await page.setViewportSize({ width: 768, height: 1024 });\n    await submissionPage.page.reload();\n    await submissionPage.waitForPageLoad();\n    \n    // Verify elements are still accessible\n    await expect(submissionPage.titleInput).toBeVisible();\n    await expect(submissionPage.contentTextarea).toBeVisible();\n    await expect(submissionPage.submitButton).toBeVisible();\n    \n    // Test mobile view\n    await page.setViewportSize({ width: 375, height: 667 });\n    await submissionPage.page.reload();\n    await submissionPage.waitForPageLoad();\n    \n    // Verify mobile layout\n    await expect(submissionPage.titleInput).toBeVisible();\n    await expect(submissionPage.contentTextarea).toBeVisible();\n    await expect(submissionPage.submitButton).toBeVisible();\n  });\n});