import { test, expect } from '@playwright/test';\nimport { StoryReviewPage } from './page-objects/StoryReviewPage';\n\n// Mock submission data for testing\nconst MOCK_SUBMISSION_DATA = {\n  id: 'test-submission-123',\n  title: 'The Adventure of the Lost Kitten',\n  author: 'Test Volunteer',\n  status: 'PENDING',\n  content: `In a bustling neighborhood filled with colorful houses, there lived a small orange kitten named Whiskers. Whiskers was curious about everything and loved to explore.\n\nOne sunny morning, while chasing a butterfly, Whiskers wandered too far from home. When he looked around, nothing seemed familiar. The houses looked different, the streets were new, and Whiskers felt scared.\n\n\"Meow! Meow!\" he called, hoping someone would help him find his way home.\n\nA friendly dog named Max heard his cries. \"Don't worry, little kitten,\" Max said kindly. \"I'll help you find your family. What do you remember about your home?\"\n\nWhiskers thought carefully. \"There's a red mailbox, and my owner grows beautiful roses in the garden.\"\n\nTogether, Max and Whiskers walked through the neighborhood, looking for clues. They asked other animals for help - Mrs. Robin who had a view from the trees, and Mr. Rabbit who knew all the gardens.\n\nFinally, Mrs. Robin chirped excitedly, \"I see red roses blooming near a red mailbox, two blocks that way!\"\n\nWhiskers' heart filled with joy as they approached the familiar house. His owner, Sarah, was in the garden calling his name with tears in her eyes.\n\n\"Whiskers!\" Sarah cried, scooping him up in a warm hug. \"I was so worried about you!\"\n\nWhiskers purred loudly and nuzzled against Sarah. He had learned something important that day - when you're lost or scared, it's okay to ask for help, and there are always kind friends willing to lend a paw.\n\nFrom that day on, Whiskers was still curious and adventurous, but he always made sure he knew the way back home.`\n};\n\ntest.describe('Phase 5: Story Manager Review Workflow', () => {\n  let reviewPage: StoryReviewPage;\n\n  test.beforeEach(async ({ page }) => {\n    reviewPage = new StoryReviewPage(page);\n    \n    // Mock authentication for story manager role\n    await page.addInitScript(() => {\n      window.localStorage.setItem('next-auth.session-token', 'mock-story-manager-session');\n    });\n    \n    // Mock API responses for submission data\n    await page.route('/api/story-manager/text-submissions/**', route => {\n      const url = route.request().url();\n      \n      if (url.includes('/feedback')) {\n        // Mock feedback submission\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ success: true })\n        });\n      } else if (url.includes('/review')) {\n        // Mock review action\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({ \n            success: true,\n            submission: { \n              ...MOCK_SUBMISSION_DATA,\n              status: 'APPROVED'\n            }\n          })\n        });\n      } else {\n        // Mock submission detail\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            submission: {\n              ...MOCK_SUBMISSION_DATA,\n              author: {\n                id: 'test-author-1',\n                name: MOCK_SUBMISSION_DATA.author,\n                email: 'volunteer@test.com'\n              },\n              contentMd: MOCK_SUBMISSION_DATA.content,\n              revisionNo: 1,\n              language: 'English',\n              ageRange: '6-8 years',\n              category: ['Adventure'],\n              tags: ['friendship', 'helping others', 'problem solving'],\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n              workflowTransitions: []\n            }\n          })\n        });\n      }\n    });\n  });\n\n  test('should load story review page correctly', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Verify page elements are present\n    await expect(reviewPage.storyTitle).toBeVisible();\n    await expect(reviewPage.textReviewPanel).toBeVisible();\n    await expect(reviewPage.submissionDetails).toBeVisible();\n    \n    // Verify submission data is displayed\n    await reviewPage.verifySubmissionDetails({\n      title: MOCK_SUBMISSION_DATA.title,\n      author: MOCK_SUBMISSION_DATA.author,\n      status: MOCK_SUBMISSION_DATA.status\n    });\n  });\n\n  test('should display content with line numbers', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Verify content is displayed\n    const contentText = await reviewPage.getContentText();\n    expect(contentText.length).toBeGreaterThan(0);\n    expect(contentText).toContain('Whiskers');\n    \n    // Verify line numbers if implemented\n    await reviewPage.verifyLineNumbers();\n  });\n\n  test('should add line-by-line comments successfully', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    const testComment = 'This opening sentence could be more engaging. Consider starting with dialogue or action.';\n    \n    // Add comment to first line\n    await reviewPage.addLineComment(1, testComment);\n    \n    // Verify comment was added\n    await reviewPage.verifyCommentAdded(testComment);\n  });\n\n  test('should add general feedback comments', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    const generalFeedback = 'Overall, this is a heartwarming story with a clear moral lesson. The characters are well-developed and the plot flows nicely.';\n    \n    // Add general comment\n    await reviewPage.addGeneralComment(generalFeedback);\n    \n    // Verify comment was added\n    await reviewPage.verifyCommentAdded(generalFeedback);\n  });\n\n  test('should approve submission with feedback', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    const approvalFeedback = 'Excellent story! The message about asking for help and community support is perfect for the target age group. Ready for publication.';\n    \n    // Approve the submission\n    await reviewPage.approveSubmission(approvalFeedback);\n    \n    // Verify action was successful\n    await reviewPage.verifyReviewActionSuccess();\n  });\n\n  test('should request revision with specific feedback', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    const revisionFeedback = `Please consider the following improvements:\n1. Add more descriptive language about the neighborhood\n2. Expand on Whiskers' emotions when he realizes he's lost\n3. Include more dialogue between the animal characters\n4. Consider shortening some paragraphs for better readability for young readers`;\n    \n    // Request revision\n    await reviewPage.requestRevision(revisionFeedback);\n    \n    // Verify action was successful\n    await reviewPage.verifyReviewActionSuccess();\n  });\n\n  test('should reject submission with constructive feedback', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    const rejectionFeedback = `Unfortunately, this submission needs significant work before it can be considered for publication:\n\n1. Content concerns: The story lacks age-appropriate content for the target audience\n2. Structure issues: The plot progression is unclear\n3. Language complexity: Vocabulary is too advanced for 6-8 year olds\n4. Length issues: Story is too long for the intended age group\n\nWe encourage you to revise and resubmit with these points addressed.`;\n    \n    // Reject the submission\n    await reviewPage.rejectSubmission(rejectionFeedback);\n    \n    // Verify action was successful\n    await reviewPage.verifyReviewActionSuccess();\n  });\n\n  test('should display submission metadata correctly', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Verify essential metadata is shown\n    await reviewPage.verifySubmissionMetadata();\n    \n    // Check specific metadata fields if visible\n    if (await reviewPage.languageInfo.isVisible()) {\n      await expect(reviewPage.languageInfo).toContainText('English');\n    }\n    \n    if (await reviewPage.ageRangeInfo.isVisible()) {\n      await expect(reviewPage.ageRangeInfo).toContainText('6-8');\n    }\n    \n    if (await reviewPage.categoryInfo.isVisible()) {\n      await expect(reviewPage.categoryInfo).toContainText('Adventure');\n    }\n  });\n\n  test('should show review history when available', async ({ page }) => {\n    // Mock submission with review history\n    await page.route('/api/story-manager/text-submissions/**', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          submission: {\n            ...MOCK_SUBMISSION_DATA,\n            author: {\n              id: 'test-author-1',\n              name: MOCK_SUBMISSION_DATA.author,\n              email: 'volunteer@test.com'\n            },\n            contentMd: MOCK_SUBMISSION_DATA.content,\n            workflowTransitions: [\n              {\n                id: 'transition-1',\n                fromStatus: null,\n                toStatus: 'SUBMITTED',\n                comment: 'Initial submission',\n                createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\n                performedBy: { name: 'Test Volunteer' }\n              },\n              {\n                id: 'transition-2',\n                fromStatus: 'SUBMITTED',\n                toStatus: 'IN_REVIEW',\n                comment: 'Assigned for review',\n                createdAt: new Date(Date.now() - 43200000).toISOString(), // 12 hours ago\n                performedBy: { name: 'Story Manager' }\n              }\n            ]\n          }\n        })\n      });\n    });\n    \n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Verify review history is displayed\n    await reviewPage.verifyReviewHistory();\n  });\n\n  test('should handle multiple comments on same line', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Add first comment\n    await reviewPage.addLineComment(3, 'First comment on this line.');\n    await reviewPage.verifyCommentAdded('First comment on this line.');\n    \n    // Add second comment to same line\n    await reviewPage.addLineComment(3, 'Second comment with additional feedback.');\n    await reviewPage.verifyCommentAdded('Second comment with additional feedback.');\n    \n    // Both comments should be visible\n    await expect(reviewPage.existingComments).toContainText('First comment on this line.');\n    await expect(reviewPage.existingComments).toContainText('Second comment with additional feedback.');\n  });\n\n  test('should validate word count and content length', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Get word count of the content\n    const wordCount = await reviewPage.getWordCount();\n    expect(wordCount).toBeGreaterThan(50); // Should be substantial content\n    expect(wordCount).toBeLessThan(2000); // Should not be too long for target audience\n  });\n\n  test('should navigate back to submissions list', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Navigate back\n    await reviewPage.navigateBack();\n    \n    // Should be on story manager dashboard\n    await expect(reviewPage.page).toHaveURL(/\\/dashboard\\/story-manager/);\n  });\n\n  test('should handle concurrent review attempts', async ({ page }) => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Simulate concurrent review by mocking a conflict response\n    await page.route('/api/story-manager/text-submissions/*/review', route => {\n      route.fulfill({\n        status: 409, // Conflict\n        contentType: 'application/json',\n        body: JSON.stringify({ \n          error: 'This submission is currently being reviewed by another user.' \n        })\n      });\n    });\n    \n    // Try to approve\n    await reviewPage.approveButton.click();\n    await reviewPage.confirmActionButton.click();\n    \n    // Should show error message about concurrent access\n    await expect(reviewPage.errorMessage).toBeVisible();\n    await expect(reviewPage.errorMessage).toContainText(/another user|conflict/i);\n  });\n\n  test('should preserve review state during session', async ({ page }) => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Add a comment\n    await reviewPage.addGeneralComment('This is a test comment that should persist.');\n    \n    // Refresh the page\n    await page.reload();\n    await reviewPage.waitForPageLoad();\n    \n    // Comment should still be visible (if implementation supports persistence)\n    try {\n      await reviewPage.verifyCommentAdded('This is a test comment that should persist.');\n      console.log('✅ Comment persistence working correctly');\n    } catch (error) {\n      console.log('ℹ️  Note: Comment persistence may not be implemented');\n    }\n  });\n\n  test('should display available actions based on status', async () => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Get available actions\n    const actions = await reviewPage.getAvailableActions();\n    \n    // For pending submissions, should have approve, reject, and request revision options\n    expect(actions.length).toBeGreaterThan(0);\n    console.log('Available actions for PENDING submission:', actions);\n    \n    // Should include standard review actions\n    const hasReviewActions = actions.some(action => \n      ['approve', 'reject', 'request_revision'].includes(action)\n    );\n    expect(hasReviewActions).toBe(true);\n  });\n\n  test('should handle network errors during review actions', async ({ page }) => {\n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Mock network error\n    await page.route('/api/story-manager/text-submissions/*/review', route => {\n      route.fulfill({\n        status: 500,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Internal server error' })\n      });\n    });\n    \n    // Try to approve (should fail gracefully)\n    await reviewPage.approveButton.click();\n    await reviewPage.confirmActionButton.click();\n    \n    // Should show error message\n    await expect(reviewPage.errorMessage).toBeVisible();\n  });\n\n  test('should be responsive on mobile devices', async ({ page }) => {\n    // Test mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    await reviewPage.navigateTo(MOCK_SUBMISSION_DATA.id);\n    await reviewPage.waitForPageLoad();\n    \n    // Key elements should still be accessible on mobile\n    await expect(reviewPage.storyTitle).toBeVisible();\n    await expect(reviewPage.textReviewPanel).toBeVisible();\n    \n    // Action buttons should be accessible\n    const actions = await reviewPage.getAvailableActions();\n    expect(actions.length).toBeGreaterThan(0);\n  });\n});