import { test, expect } from '@playwright/test';\n\n// Mock published text story data\nconst MOCK_TEXT_STORIES = [\n  {\n    id: 'text-story-1',\n    title: 'The Friendly Dragon',\n    summary: 'A story about a dragon who learns the value of friendship.',\n    author: 'Student Author',\n    ageRange: '6-8 years',\n    category: 'Fantasy',\n    tags: ['friendship', 'dragons', 'kindness'],\n    status: 'PUBLISHED',\n    wordCount: 450,\n    readingTime: 3,\n    difficulty: 'Easy',\n    thumbnailUrl: '/images/text-story-thumbnails/friendly-dragon.jpg'\n  },\n  {\n    id: 'text-story-2',\n    title: 'The Magic Garden',\n    summary: 'Children discover a garden where vegetables grow overnight.',\n    author: 'Teacher Volunteer',\n    ageRange: '8-10 years',\n    category: 'Adventure',\n    tags: ['nature', 'magic', 'discovery'],\n    status: 'PUBLISHED',\n    wordCount: 620,\n    readingTime: 4,\n    difficulty: 'Medium',\n    thumbnailUrl: '/images/text-story-thumbnails/magic-garden.jpg'\n  },\n  {\n    id: 'text-story-3',\n    title: 'The Little Scientists',\n    summary: 'A group of friends conduct fun science experiments.',\n    author: 'Community Volunteer',\n    ageRange: '8-12 years',\n    category: 'Educational',\n    tags: ['science', 'experiments', 'learning'],\n    status: 'PUBLISHED',\n    wordCount: 780,\n    readingTime: 5,\n    difficulty: 'Medium',\n    thumbnailUrl: '/images/text-story-thumbnails/little-scientists.jpg'\n  }\n];\n\ntest.describe('Phase 5: Library Integration Testing', () => {\n  test.beforeEach(async ({ page }) => {\n    // Mock API responses for library data\n    await page.route('/api/library/text-stories', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          success: true,\n          textStories: MOCK_TEXT_STORIES,\n          total: MOCK_TEXT_STORIES.length,\n          hasMore: false\n        })\n      });\n    });\n\n    // Mock individual story fetching\n    await page.route('/api/esl/text-stories/*', route => {\n      const storyId = route.request().url().split('/').pop();\n      const story = MOCK_TEXT_STORIES.find(s => s.id === storyId);\n      \n      if (story) {\n        route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify({\n            success: true,\n            story: {\n              ...story,\n              contentMd: `# ${story.title}\\n\\nThis is the full content of ${story.title}. It's an engaging story that teaches important life lessons.\\n\\nThe story continues with interesting characters and adventures that captivate young readers.`\n            }\n          })\n        });\n      } else {\n        route.fulfill({ status: 404 });\n      }\n    });\n  });\n\n  test('should load main library page with Text Stories tab', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Verify library page loads\n    await expect(page.locator('h1')).toContainText(/library|stories/i);\n    \n    // Look for Text Stories tab or section\n    const textStoriesTab = page.locator(\n      'button, a, .tab, [role=\"tab\"]'\n    ).filter({ hasText: /text.*stories|stories.*text/i });\n    \n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      console.log('✅ Text Stories tab found and clicked');\n    } else {\n      // Check if text stories are displayed by default\n      console.log('ℹ️  Text Stories tab not found, checking for default display');\n    }\n    \n    // Wait for content to load\n    await page.waitForTimeout(1000);\n  });\n\n  test('should display published text stories correctly', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories section\n    const textStoriesTab = page.locator(\n      'button, a, .tab, [role=\"tab\"]'\n    ).filter({ hasText: /text.*stories/i });\n    \n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n    }\n    \n    // Wait for stories to load\n    await page.waitForTimeout(2000);\n    \n    // Check for story cards/items\n    const storyCards = page.locator(\n      '.story-card, .book-card, .text-story, .story-item, .card'\n    ).filter({ hasText: /friendly dragon|magic garden|scientists/i });\n    \n    const storyCount = await storyCards.count();\n    expect(storyCount).toBeGreaterThanOrEqual(1);\n    \n    // Verify first story details\n    const firstStory = storyCards.first();\n    await expect(firstStory).toBeVisible();\n    \n    // Check for essential story information\n    const hasTitle = await firstStory.locator('h1, h2, h3, .title, .story-title').count() > 0;\n    const hasAuthor = await firstStory.getByText(/by |author/i).count() > 0;\n    \n    expect(hasTitle || hasAuthor).toBe(true);\n  });\n\n  test('should show correct metadata for text stories', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n    }\n    \n    await page.waitForTimeout(2000);\n    \n    // Find a story card\n    const storyCard = page.locator('.story-card, .book-card, .card').first();\n    \n    if (await storyCard.isVisible()) {\n      // Check for metadata elements\n      const metadataSelectors = [\n        'text=/\\d+.*words?/i',        // Word count\n        'text=/\\d+.*min/i',          // Reading time\n        'text=/age.*\\d+/i',          // Age range\n        'text=/easy|medium|hard/i',   // Difficulty\n        '.category, .tag, .badge'     // Categories/tags\n      ];\n      \n      let metadataFound = false;\n      for (const selector of metadataSelectors) {\n        if (await storyCard.locator(selector).count() > 0) {\n          metadataFound = true;\n          break;\n        }\n      }\n      \n      console.log('Story metadata displayed:', metadataFound);\n    }\n  });\n\n  test('should support search functionality for text stories', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Look for search input\n    const searchInput = page.locator(\n      'input[type=\"search\"], input[placeholder*=\"search\" i], .search-input'\n    );\n    \n    if (await searchInput.isVisible()) {\n      // Search for a specific story\n      await searchInput.fill('dragon');\n      \n      // Look for search button or trigger\n      const searchButton = page.locator(\n        'button[type=\"submit\"], button').filter({ hasText: /search/i })\n      ).first();\n      \n      if (await searchButton.isVisible()) {\n        await searchButton.click();\n      } else {\n        // Try pressing Enter\n        await searchInput.press('Enter');\n      }\n      \n      await page.waitForTimeout(1000);\n      \n      // Check if search results are filtered\n      const searchResults = page.locator('.story-card, .book-card, .card');\n      const resultCount = await searchResults.count();\n      \n      if (resultCount > 0) {\n        // Verify results contain search term\n        const firstResult = searchResults.first();\n        const resultText = await firstResult.textContent();\n        expect(resultText?.toLowerCase()).toContain('dragon');\n        console.log('✅ Search functionality working');\n      } else {\n        console.log('ℹ️  Search returned no results');\n      }\n    } else {\n      console.log('ℹ️  Search functionality not found on page');\n    }\n  });\n\n  test('should support filtering by category and age range', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Look for filter options\n    const filterSelectors = [\n      'select[name*=\"category\"], select[id*=\"category\"]',\n      'select[name*=\"age\"], select[id*=\"age\"]',\n      '.filter-dropdown, .category-filter, .age-filter'\n    ];\n    \n    let filtersFound = false;\n    \n    for (const selector of filterSelectors) {\n      const filterElement = page.locator(selector).first();\n      \n      if (await filterElement.isVisible()) {\n        filtersFound = true;\n        \n        // Try to interact with the filter\n        if (filterElement.locator('select').count() > 0) {\n          // It's a select dropdown\n          const options = await filterElement.locator('option').count();\n          if (options > 1) {\n            await filterElement.selectOption({ index: 1 });\n            await page.waitForTimeout(1000);\n            console.log('✅ Category/Age filter interaction successful');\n          }\n        }\n        break;\n      }\n    }\n    \n    console.log('Filter functionality found:', filtersFound);\n  });\n\n  test('should navigate to individual text story correctly', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories section\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(1000);\n    }\n    \n    // Find and click on a story\n    const storyCard = page.locator('.story-card, .book-card, .card').first();\n    \n    if (await storyCard.isVisible()) {\n      // Look for clickable elements within the story card\n      const clickableElements = [\n        storyCard.locator('a').first(),\n        storyCard.locator('button').filter({ hasText: /read|view|open/i }).first(),\n        storyCard.locator('.title, h1, h2, h3').first()\n      ];\n      \n      let clicked = false;\n      for (const element of clickableElements) {\n        if (await element.isVisible()) {\n          await element.click();\n          clicked = true;\n          break;\n        }\n      }\n      \n      if (!clicked) {\n        // Try clicking the story card itself\n        await storyCard.click();\n      }\n      \n      // Wait for navigation\n      await page.waitForTimeout(2000);\n      \n      // Check if we've navigated to a story page\n      const currentUrl = page.url();\n      const isStoryPage = /\\/story\\/|\\/(esl|read|text)/i.test(currentUrl);\n      \n      console.log('Navigation to story page:', isStoryPage);\n      console.log('Current URL:', currentUrl);\n      \n      if (isStoryPage) {\n        // Verify story content is displayed\n        const storyContent = page.locator('.story-content, .content, .text-reader, main');\n        await expect(storyContent).toBeVisible();\n      }\n    }\n  });\n\n  test('should display story thumbnails and previews', async ({ page }) => {\n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(1000);\n    }\n    \n    // Check for thumbnails or preview images\n    const thumbnails = page.locator('img, .thumbnail, .preview-image, .story-image');\n    const thumbnailCount = await thumbnails.count();\n    \n    console.log('Thumbnails found:', thumbnailCount);\n    \n    if (thumbnailCount > 0) {\n      const firstThumbnail = thumbnails.first();\n      await expect(firstThumbnail).toBeVisible();\n      \n      // Check if image loads properly\n      const isLoaded = await firstThumbnail.evaluate((img: HTMLImageElement) => {\n        return img.complete && img.naturalWidth > 0;\n      });\n      \n      console.log('First thumbnail loaded:', isLoaded);\n    }\n  });\n\n  test('should handle empty text stories gracefully', async ({ page }) => {\n    // Mock empty response\n    await page.route('/api/library/text-stories', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          success: true,\n          textStories: [],\n          total: 0,\n          hasMore: false\n        })\n      });\n    });\n    \n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(1000);\n    }\n    \n    // Check for empty state message\n    const emptyStateMessages = [\n      'text=/no.*stories/i',\n      'text=/nothing.*found/i',\n      'text=/empty/i',\n      'text=/coming.*soon/i',\n      '.empty-state, .no-results'\n    ];\n    \n    let emptyStateFound = false;\n    for (const selector of emptyStateMessages) {\n      if (await page.locator(selector).count() > 0) {\n        emptyStateFound = true;\n        break;\n      }\n    }\n    \n    console.log('Empty state handling:', emptyStateFound);\n  });\n\n  test('should support pagination for large text story collections', async ({ page }) => {\n    // Mock large dataset\n    const manyStories = Array.from({ length: 50 }, (_, i) => ({\n      ...MOCK_TEXT_STORIES[0],\n      id: `text-story-${i}`,\n      title: `Test Story ${i + 1}`\n    }));\n    \n    await page.route('/api/library/text-stories', route => {\n      const url = new URL(route.request().url());\n      const page = parseInt(url.searchParams.get('page') || '1');\n      const limit = parseInt(url.searchParams.get('limit') || '12');\n      \n      const start = (page - 1) * limit;\n      const end = start + limit;\n      const pageStories = manyStories.slice(start, end);\n      \n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({\n          success: true,\n          textStories: pageStories,\n          total: manyStories.length,\n          hasMore: end < manyStories.length,\n          currentPage: page,\n          totalPages: Math.ceil(manyStories.length / limit)\n        })\n      });\n    });\n    \n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(1000);\n    }\n    \n    // Look for pagination controls\n    const paginationSelectors = [\n      '.pagination',\n      'button, a').filter({ hasText: /next|previous|page/i }),\n      'text=/page.*\\d+/i',\n      '.page-nav, .pager'\n    ];\n    \n    let paginationFound = false;\n    for (const selector of paginationSelectors) {\n      if (await page.locator(selector).count() > 0) {\n        paginationFound = true;\n        \n        // Try to click next page\n        const nextButton = page.locator('button, a').filter({ hasText: /next/i }).first();\n        if (await nextButton.isVisible()) {\n          await nextButton.click();\n          await page.waitForTimeout(1000);\n          console.log('✅ Pagination next button working');\n        }\n        break;\n      }\n    }\n    \n    console.log('Pagination functionality:', paginationFound);\n  });\n\n  test('should be responsive on mobile devices', async ({ page }) => {\n    // Set mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Check if the library is still accessible on mobile\n    await expect(page.locator('h1, .title')).toBeVisible();\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(1000);\n    }\n    \n    // Check if story cards are visible and properly sized on mobile\n    const storyCards = page.locator('.story-card, .book-card, .card');\n    const cardCount = await storyCards.count();\n    \n    if (cardCount > 0) {\n      const firstCard = storyCards.first();\n      const cardBox = await firstCard.boundingBox();\n      \n      // Card should fit within mobile viewport width\n      expect(cardBox?.width).toBeLessThanOrEqual(375);\n      console.log('✅ Mobile responsive layout verified');\n    }\n  });\n\n  test('should handle API errors gracefully', async ({ page }) => {\n    // Mock API error\n    await page.route('/api/library/text-stories', route => {\n      route.fulfill({\n        status: 500,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Internal server error' })\n      });\n    });\n    \n    await page.goto('/library');\n    await page.waitForLoadState('networkidle');\n    \n    // Navigate to text stories\n    const textStoriesTab = page.locator('button, a, .tab').filter({ hasText: /text.*stories/i });\n    if (await textStoriesTab.isVisible()) {\n      await textStoriesTab.click();\n      await page.waitForTimeout(2000);\n    }\n    \n    // Check for error message or fallback content\n    const errorMessages = [\n      'text=/error/i',\n      'text=/failed.*load/i',\n      'text=/something.*wrong/i',\n      '.error, .alert-error'\n    ];\n    \n    let errorHandlingFound = false;\n    for (const selector of errorMessages) {\n      if (await page.locator(selector).count() > 0) {\n        errorHandlingFound = true;\n        break;\n      }\n    }\n    \n    console.log('Error handling present:', errorHandlingFound);\n  });\n});