name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - rbac
          - performance
          - accessibility
          - visual
      browsers:
        description: 'Browsers to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test-setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=e2e-${{ hashFiles('**/package-lock.json', '**/Dockerfile*', '**/docker-compose*.yml') }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            e2e-${{ hashFiles('**/package-lock.json', '**/Dockerfile*', '**/docker-compose*.yml') }}-
            e2e-
      
      - name: Build test containers
        run: |
          docker-compose -f docker-compose.test.yml build --parallel
          
      - name: Save Docker images
        run: |
          docker save $(docker-compose -f docker-compose.test.yml config | grep 'image:' | awk '{print $2}' | sort -u) | gzip > docker-images.tar.gz
          
      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: docker-images.tar.gz
          retention-days: 1

  e2e-tests:
    name: E2E Tests - ${{ matrix.project }}
    runs-on: ubuntu-latest
    needs: test-setup
    strategy:
      fail-fast: false
      matrix:
        project:
          - chromium
          - firefox
          - webkit
          - mobile-chrome
          - mobile-safari
          - learner
          - teacher
          - institution
          - volunteer
          - admin
          - performance
          - accessibility
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          
      - name: Load Docker images
        run: |
          docker load < docker-images.tar.gz
      
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d test-db test-app mailhog redis stripe-mock
          
          # Wait for services to be healthy
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -E "test-app.*healthy"; do sleep 2; done'
          timeout 30 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -E "test-db.*healthy"; do sleep 2; done'
      
      - name: Run database migrations
        run: |
          docker-compose -f docker-compose.test.yml exec -T test-app npx prisma migrate deploy
          docker-compose -f docker-compose.test.yml exec -T test-app npx prisma db seed
      
      - name: Run E2E tests - ${{ matrix.project }}
        run: |
          docker-compose -f docker-compose.test.yml run --rm \
            -e PROJECT=${{ matrix.project }} \
            playwright \
            npx playwright test --project=${{ matrix.project }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.project }}
          path: |
            test-results/
            playwright-report/
            test-artifacts/
          retention-days: 7
      
      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-videos-${{ matrix.project }}
          path: test-artifacts/videos/
          retention-days: 3
      
      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs > docker-logs.txt
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs-${{ matrix.project }}
          path: docker-logs.txt
          retention-days: 3
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: test-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          
      - name: Load Docker images
        run: |
          docker load < docker-images.tar.gz
      
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d test-db test-app
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -E "test-app.*healthy"; do sleep 2; done'
      
      - name: Run visual regression tests
        run: |
          docker-compose -f docker-compose.test.yml run --rm \
            playwright \
            npx playwright test --project=visual --update-snapshots=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      
      - name: Upload visual diff report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: visual-diff-report
          path: |
            test-results/visual-diff/
            playwright-report/
          retention-days: 7
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: test-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          
      - name: Load Docker images
        run: |
          docker load < docker-images.tar.gz
      
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d test-db test-app
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -E "test-app.*healthy"; do sleep 2; done'
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3001/
            http://localhost:3001/library
            http://localhost:3001/dashboard/learner
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
      
      - name: Save Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7
      
      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-regression, lighthouse]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-results/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install report dependencies
        run: |
          npm install -g @playwright/test allure-commandline
      
      - name: Merge test results
        run: |
          mkdir -p merged-results
          find all-results -name "*.json" -path "*/test-results/*" -exec cp {} merged-results/ \;
      
      - name: Generate HTML report
        run: |
          npx playwright merge-reports --reporter=html merged-results/
      
      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: final-test-report
          path: playwright-report/
          retention-days: 30
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = require('./merged-results/results.json');
            
            const passed = testResults.suites.reduce((acc, suite) => 
              acc + suite.specs.filter(spec => spec.ok).length, 0);
            const failed = testResults.suites.reduce((acc, suite) => 
              acc + suite.specs.filter(spec => !spec.ok).length, 0);
            const skipped = testResults.suites.reduce((acc, suite) => 
              acc + suite.specs.filter(spec => spec.pending).length, 0);
            
            const comment = `## üß™ E2E Test Results
            
            | Status | Count |
            |--------|-------|
            | ‚úÖ Passed | ${passed} |
            | ‚ùå Failed | ${failed} |
            | ‚è≠Ô∏è Skipped | ${skipped} |
            
            **Total Duration:** ${(testResults.duration / 1000).toFixed(2)}s
            
            [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test-report]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            E2E Tests Failed!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK != ''
      
      - name: Create GitHub Issue for failure
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Automated E2E tests failed
              
              **Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Triggered by:** ${context.eventName}
              
              Please investigate and fix the failing tests.`,
              labels: ['bug', 'e2e-tests', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number}`);

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [test-report]
    if: always()
    steps:
      - name: Cleanup Docker resources
        run: |
          docker system prune -af --volumes
          docker network prune -f
      
      - name: Remove old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oneWeekAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
            
            for (const artifact of artifacts.data.artifacts) {
              if (new Date(artifact.created_at).getTime() < oneWeekAgo) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }