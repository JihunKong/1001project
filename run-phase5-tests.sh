#!/bin/bash\n\n# Phase 5 Text Publishing Workflow E2E Test Execution Script\n# This script runs comprehensive tests against the production-like environment\n\nset -e  # Exit on any error\n\n# Configuration\nTEST_BASE_URL=\"https://3.128.143.122\"\nTEST_ENV=\"production\"\nTIMESTAMP=$(date +\"%Y%m%d_%H%M%S\")\nREPORT_DIR=\"test-results/phase5_${TIMESTAMP}\"\nLOG_FILE=\"${REPORT_DIR}/execution.log\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Logging function\nlog() {\n    echo -e \"${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1\" | tee -a \"${LOG_FILE}\"\n}\n\nerror() {\n    echo -e \"${RED}[ERROR]${NC} $1\" | tee -a \"${LOG_FILE}\"\n}\n\nsuccess() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\" | tee -a \"${LOG_FILE}\"\n}\n\nwarning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\" | tee -a \"${LOG_FILE}\"\n}\n\n# Create report directory\nmkdir -p \"$REPORT_DIR\"\n\nlog \"üöÄ Starting Phase 5 Text Publishing Workflow E2E Tests\"\nlog \"=================================================\"\nlog \"Environment: $TEST_ENV\"\nlog \"Base URL: $TEST_BASE_URL\"\nlog \"Report Directory: $REPORT_DIR\"\nlog \"=================================================\"\n\n# Check prerequisites\nlog \"üìã Checking prerequisites...\"\n\n# Check if server is accessible\nif curl -k -s --max-time 10 \"$TEST_BASE_URL\" > /dev/null; then\n    success \"‚úÖ Server is accessible at $TEST_BASE_URL\"\nelse\n    error \"‚ùå Cannot reach server at $TEST_BASE_URL\"\n    exit 1\nfi\n\n# Check if Node.js and npm are available\nif ! command -v node &> /dev/null; then\n    error \"‚ùå Node.js is not installed\"\n    exit 1\nfi\n\nif ! command -v npm &> /dev/null; then\n    error \"‚ùå npm is not installed\"\n    exit 1\nfi\n\nsuccess \"‚úÖ Prerequisites check passed\"\n\n# Install dependencies if needed\nlog \"üì¶ Installing dependencies...\"\nif [ ! -d \"node_modules\" ]; then\n    npm install\nfi\n\n# Install Playwright browsers if needed\nlog \"üåê Setting up Playwright browsers...\"\nnpx playwright install chromium firefox webkit\n\n# Set environment variables for testing\nexport TEST_BASE_URL=\"$TEST_BASE_URL\"\nexport HEADLESS=\"true\"\nexport SCREENSHOT=\"only-on-failure\"\nexport VIDEO=\"retain-on-failure\"\nexport TRACE=\"retain-on-failure\"\n\n# Test execution phases\nTEST_PHASES=(\n    \"text-submission:Text Story Submission Workflow\"\n    \"story-review:Story Manager Review Workflow\"\n    \"library-integration:Library Integration Testing\"\n    \"esl-integration:ESL Reader Integration Testing\"\n    \"role-permissions:Multi-Role Permission Testing\"\n    \"mobile-responsive:Mobile Responsiveness Testing\"\n)\n\n# Summary variables\nTOTAL_PHASES=${#TEST_PHASES[@]}\nPASSED_PHASES=0\nFAILED_PHASES=0\nFAILED_PHASE_NAMES=()\n\nlog \"üß™ Running $TOTAL_PHASES test phases...\"\nlog \"\"\n\n# Execute each test phase\nfor phase_info in \"${TEST_PHASES[@]}\"; do\n    IFS=':' read -r phase_name phase_description <<< \"$phase_info\"\n    \n    log \"üîÑ Running: $phase_description ($phase_name)\"\n    log \"===================================================\"\n    \n    # Run the specific test phase\n    if npx playwright test \\\n        --config=playwright.config.phase5.ts \\\n        --project=\"$phase_name\" \\\n        --reporter=list,html,json \\\n        --output-dir=\"$REPORT_DIR\" \\\n        2>&1 | tee -a \"${LOG_FILE}\"; then\n        \n        success \"‚úÖ PASSED: $phase_description\"\n        ((PASSED_PHASES++))\n    else\n        error \"‚ùå FAILED: $phase_description\"\n        FAILED_PHASE_NAMES+=(\"$phase_description\")\n        ((FAILED_PHASES++))\n    fi\n    \n    log \"\"\ndone\n\n# Run performance tests separately\nlog \"‚ö° Running Performance Tests...\"\nif npx playwright test \\\n    --config=playwright.config.phase5.ts \\\n    --project=performance \\\n    --reporter=list,json \\\n    --output-dir=\"$REPORT_DIR\" \\\n    2>&1 | tee -a \"${LOG_FILE}\"; then\n    \n    success \"‚úÖ Performance tests passed\"\nelse\n    warning \"‚ö†Ô∏è  Some performance tests failed (non-critical)\"\nfi\n\n# Generate comprehensive test report\nlog \"üìä Generating comprehensive test report...\"\n\ncat > \"$REPORT_DIR/PHASE5_SUMMARY.md\" << EOF\n# Phase 5 Text Publishing Workflow E2E Test Report\n\n## Test Execution Summary\n\n- **Execution Date:** $(date)\n- **Environment:** $TEST_ENV\n- **Base URL:** $TEST_BASE_URL\n- **Total Test Phases:** $TOTAL_PHASES\n- **Passed Phases:** $PASSED_PHASES\n- **Failed Phases:** $FAILED_PHASES\n- **Success Rate:** $(( PASSED_PHASES * 100 / TOTAL_PHASES ))%\n\n## Test Phases Executed\n\n### ‚úÖ Passed Phases\nEOF\n\n# Add passed phases to report\nfor phase_info in \"${TEST_PHASES[@]}\"; do\n    IFS=':' read -r phase_name phase_description <<< \"$phase_info\"\n    if ! printf '%s\\n' \"${FAILED_PHASE_NAMES[@]}\" | grep -q \"^$phase_description$\"; then\n        echo \"- **$phase_description** - All tests passed\" >> \"$REPORT_DIR/PHASE5_SUMMARY.md\"\n    fi\ndone\n\nif [ ${#FAILED_PHASE_NAMES[@]} -gt 0 ]; then\n    cat >> \"$REPORT_DIR/PHASE5_SUMMARY.md\" << EOF\n\n### ‚ùå Failed Phases\nEOF\n    \n    for failed_phase in \"${FAILED_PHASE_NAMES[@]}\"; do\n        echo \"- **$failed_phase** - Some tests failed (check detailed reports)\" >> \"$REPORT_DIR/PHASE5_SUMMARY.md\"\n    done\nfi\n\ncat >> \"$REPORT_DIR/PHASE5_SUMMARY.md\" << EOF\n\n## Test Scenarios Covered\n\n### 1. Text Story Submission Workflow\n- Complete story submission form functionality\n- Auto-save and draft management\n- Preview mode toggle\n- Form validation\n- Submission queue integration\n\n### 2. Story Manager Review Workflow\n- Line-by-line comment functionality\n- Review actions (approve, reject, request revision)\n- Feedback submission\n- Workflow history tracking\n- Concurrent review handling\n\n### 3. Library Integration\n- Text Stories tab functionality\n- Story metadata display\n- Search and filtering\n- Navigation to individual stories\n- Pagination and loading states\n\n### 4. ESL Reader Integration\n- Story content rendering\n- Word definitions and vocabulary support\n- AI chatbot interaction\n- Text difficulty adaptation\n- Progress tracking\n- Audio/TTS functionality\n\n### 5. Multi-Role Permission Testing\n- Role-based access control\n- API endpoint permissions\n- Navigation restrictions\n- Cross-role access prevention\n- Authentication flow validation\n\n### 6. Mobile Responsiveness\n- Touch interaction support\n- Responsive design verification\n- Mobile-optimized navigation\n- Text readability optimization\n- Form usability on mobile devices\n\n## Artifacts Generated\n\n- **HTML Report:** [playwright-report/phase5/index.html](./playwright-report/phase5/index.html)\n- **JSON Results:** [phase5-results.json](./phase5-results.json)\n- **Screenshots:** Available for failed tests in test-results/phase5/\n- **Videos:** Available for failed tests in test-artifacts/phase5/videos/\n- **Execution Log:** [execution.log](./execution.log)\n\n## Recommendations\n\n### If All Tests Passed (100% Success Rate)\n- ‚úÖ Phase 5 text publishing workflow is functioning correctly\n- ‚úÖ All user roles have appropriate access controls\n- ‚úÖ Mobile responsiveness meets standards\n- ‚úÖ ESL integration features are working properly\n\n### If Some Tests Failed\n- üîç Review failed test screenshots and traces\n- üìã Check server logs for backend issues\n- üîß Address specific issues identified in test failures\n- üîÑ Re-run tests after fixes are applied\n\n### Performance Considerations\n- üìä Review performance test results for optimization opportunities\n- ‚è±Ô∏è  Check page load times and response times\n- üíæ Verify memory usage and resource optimization\n\n## Next Steps\n\n1. **Fix Critical Issues:** Address any failed test scenarios immediately\n2. **Performance Optimization:** Implement performance improvements if needed\n3. **User Acceptance Testing:** Conduct manual UAT for edge cases\n4. **Production Deployment:** Deploy with confidence after all tests pass\n\n---\n\n*Generated by Phase 5 E2E Test Suite on $(date)*\nEOF\n\n# Display final summary\nlog \"\"\nlog \"üìã TEST EXECUTION COMPLETE\"\nlog \"===========================\"\nlog \"Total Phases: $TOTAL_PHASES\"\nlog \"Passed: $PASSED_PHASES\"\nlog \"Failed: $FAILED_PHASES\"\nlog \"Success Rate: $(( PASSED_PHASES * 100 / TOTAL_PHASES ))%\"\nlog \"\"\n\nif [ $FAILED_PHASES -eq 0 ]; then\n    success \"üéâ ALL TESTS PASSED! Phase 5 workflow is ready for production.\"\n    success \"üìä Detailed report available at: $REPORT_DIR/PHASE5_SUMMARY.md\"\n    exit 0\nelse\n    error \"‚ö†Ô∏è  SOME TESTS FAILED. Please review the detailed reports.\"\n    error \"üìä Failed phases: ${FAILED_PHASE_NAMES[*]}\"\n    error \"üìã Detailed report available at: $REPORT_DIR/PHASE5_SUMMARY.md\"\n    exit 1\nfi