#!/bin/bash

# UX Research Report Generator
# This script collects and analyzes user feedback and behavior data
# to generate comprehensive UX research reports for role system validation

set -e

# Configuration
API_BASE_URL="http://localhost:3000/api"
OUTPUT_DIR="./reports/ux-research"
REPORT_DATE=$(date +%Y-%m-%d)
TIMEFRAME=${1:-"7d"}  # Default to 7 days, can be overridden

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create output directory
create_output_dir() {
    log_info "Creating output directory: ${OUTPUT_DIR}"
    mkdir -p "${OUTPUT_DIR}"
}

# Fetch data from APIs
fetch_feedback_data() {
    log_info "Fetching feedback data (timeframe: ${TIMEFRAME})"
    
    curl -s -X GET "${API_BASE_URL}/feedback/analytics?timeframe=${TIMEFRAME}" \
         -H "Content-Type: application/json" \
         > "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json"
    
    if [ $? -eq 0 ]; then
        log_success "Feedback data fetched successfully"
    else
        log_error "Failed to fetch feedback data"
        return 1
    fi
}

fetch_analytics_data() {
    log_info "Fetching user analytics data (timeframe: ${TIMEFRAME})"
    
    curl -s -X GET "${API_BASE_URL}/analytics/session?timeframe=${TIMEFRAME}" \
         -H "Content-Type: application/json" \
         > "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json"
    
    if [ $? -eq 0 ]; then
        log_success "Analytics data fetched successfully"
    else
        log_error "Failed to fetch analytics data"
        return 1
    fi
}

fetch_feature_usage_data() {
    log_info "Fetching feature usage data (timeframe: ${TIMEFRAME})"
    
    curl -s -X GET "${API_BASE_URL}/analytics/feature-usage?timeframe=${TIMEFRAME}" \
         -H "Content-Type: application/json" \
         > "${OUTPUT_DIR}/feature_usage_raw_${REPORT_DATE}.json"
    
    if [ $? -eq 0 ]; then
        log_success "Feature usage data fetched successfully"
    else
        log_error "Failed to fetch feature usage data"
        return 1
    fi
}

# Generate comprehensive UX report
generate_report() {
    log_info "Generating UX research report"
    
    REPORT_FILE="${OUTPUT_DIR}/ux_research_report_${REPORT_DATE}.md"
    
    cat > "${REPORT_FILE}" << EOF
# UX Research Report - Role System Validation

**Report Date:** ${REPORT_DATE}  
**Analysis Period:** Last ${TIMEFRAME}  
**Generated by:** Automated UX Research System  

## Executive Summary

This report analyzes user feedback and behavior data to validate the recent role system changes in the 1001 Stories platform.

### Key Findings

EOF

    # Parse feedback data and add key metrics
    if [ -f "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" ]; then
        # Extract key metrics using jq if available
        if command -v jq &> /dev/null; then
            TOTAL_FEEDBACK=$(jq -r '.summary.totalFeedback // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            ROLE_MIGRATION_FEEDBACK=$(jq -r '.summary.roleMigrationFeedback // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            AVG_RATING=$(jq -r '.summary.avgRating // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            CRITICAL_ISSUES=$(jq -r '.summary.criticalIssues // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            
            cat >> "${REPORT_FILE}" << EOF
- **Total Feedback Collected:** ${TOTAL_FEEDBACK}
- **Role Migration Feedback:** ${ROLE_MIGRATION_FEEDBACK}
- **Average User Rating:** ${AVG_RATING}/5.0
- **Critical Issues Reported:** ${CRITICAL_ISSUES}

EOF
        fi
    fi

    # Add detailed sections
    cat >> "${REPORT_FILE}" << EOF
## 1. User Feedback Analysis

### 1.1 Feedback Volume and Distribution

EOF

    if command -v jq &> /dev/null && [ -f "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" ]; then
        # Add feedback breakdown by type
        echo "#### Feedback by Type" >> "${REPORT_FILE}"
        echo "" >> "${REPORT_FILE}"
        jq -r '.feedbackByType | to_entries[] | "- **\(.key):** \(.value)"' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" >> "${REPORT_FILE}"
        echo "" >> "${REPORT_FILE}"
        
        # Add sentiment analysis
        echo "#### Sentiment Analysis" >> "${REPORT_FILE}"
        echo "" >> "${REPORT_FILE}"
        jq -r '.sentimentBreakdown | to_entries[] | "- **\(.key | gsub("_"; " ") | ascii_downcase | gsub("^(..)"; "\(.[:1] | ascii_upcase)\(.1:)")):** \(.value)"' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" >> "${REPORT_FILE}"
        echo "" >> "${REPORT_FILE}"
    fi

    cat >> "${REPORT_FILE}" << EOF
### 1.2 Role Migration Impact Assessment

The role system changes have been implemented to simplify user onboarding and improve the overall user experience.

EOF

    # Add analytics data if available
    if command -v jq &> /dev/null && [ -f "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json" ]; then
        TOTAL_SESSIONS=$(jq -r '.data.summary.totalSessions // 0' "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json")
        UNIQUE_USERS=$(jq -r '.data.summary.uniqueUsers // 0' "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json")
        AVG_ENGAGEMENT=$(jq -r '.data.summary.avgEngagementScore // 0' "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json")
        BOUNCE_RATE=$(jq -r '.data.summary.bounceRate // 0' "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json")
        
        cat >> "${REPORT_FILE}" << EOF
## 2. User Behavior Analytics

### 2.1 Session Statistics
- **Total Sessions:** ${TOTAL_SESSIONS}
- **Unique Users:** ${UNIQUE_USERS}
- **Average Engagement Score:** ${AVG_ENGAGEMENT}/100
- **Bounce Rate:** ${BOUNCE_RATE}%

EOF
    fi

    # Add feature usage analysis
    if command -v jq &> /dev/null && [ -f "${OUTPUT_DIR}/feature_usage_raw_${REPORT_DATE}.json" ]; then
        cat >> "${REPORT_FILE}" << EOF
## 3. Feature Usage Analysis

### 3.1 Most Used Features

EOF
        jq -r '.data.topFeatures[:5][] | "- **\(.name)** (\(.category // "General")): \(.totalAccess) uses by \(.uniqueUsers) users"' "${OUTPUT_DIR}/feature_usage_raw_${REPORT_DATE}.json" >> "${REPORT_FILE}"
        echo "" >> "${REPORT_FILE}"
    fi

    # Add recommendations section
    cat >> "${REPORT_FILE}" << EOF
## 4. Recommendations

### 4.1 Immediate Actions Required
EOF

    # Generate recommendations based on data
    if command -v jq &> /dev/null; then
        if [ -f "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" ]; then
            CRITICAL_COUNT=$(jq -r '.summary.criticalIssues // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
                echo "- **Address ${CRITICAL_COUNT} critical issues** reported by users" >> "${REPORT_FILE}"
            fi
            
            AVG_RATING_NUM=$(jq -r '.summary.avgRating // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
            if (( $(echo "$AVG_RATING_NUM < 3.5" | bc -l) )); then
                echo "- **Improve user satisfaction** - current rating (${AVG_RATING_NUM}/5.0) is below acceptable threshold" >> "${REPORT_FILE}"
            fi
        fi
        
        if [ -f "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json" ]; then
            BOUNCE_RATE_NUM=$(jq -r '.data.summary.bounceRate // 0' "${OUTPUT_DIR}/analytics_raw_${REPORT_DATE}.json")
            if [ "$BOUNCE_RATE_NUM" -gt 60 ]; then
                echo "- **Reduce bounce rate** - current rate (${BOUNCE_RATE_NUM}%) indicates users are leaving quickly" >> "${REPORT_FILE}"
            fi
        fi
    fi

    cat >> "${REPORT_FILE}" << EOF

### 4.2 Strategic Improvements
- Continue monitoring role migration satisfaction
- Implement additional onboarding guidance for new users
- Enhance feature discoverability based on usage patterns
- Set up regular user feedback collection surveys

## 5. Methodology

This report was generated using automated data collection from:
- User feedback submissions via in-app feedback widget
- User behavior tracking and session analytics
- Feature usage statistics
- Role migration tracking data

**Data Collection Period:** ${TIMEFRAME}  
**Report Generation:** Automated script execution on ${REPORT_DATE}

---
*Generated by 1001 Stories UX Research System*
EOF

    log_success "UX research report generated: ${REPORT_FILE}"
}

# Generate CSV exports for further analysis
generate_csv_exports() {
    log_info "Generating CSV exports for data analysis"
    
    if command -v jq &> /dev/null; then
        # Export feedback data
        if [ -f "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" ]; then
            jq -r '.data.feedback[] | [.id, .feedbackType, .category, .rating, .userRole, .page, .severity, .isResolved, .createdAt] | @csv' \
                "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" > "${OUTPUT_DIR}/feedback_export_${REPORT_DATE}.csv"
            
            # Add CSV header
            sed -i '1i"id","feedbackType","category","rating","userRole","page","severity","isResolved","createdAt"' \
                "${OUTPUT_DIR}/feedback_export_${REPORT_DATE}.csv"
        fi
        
        log_success "CSV exports generated"
    else
        log_warning "jq not available - skipping CSV export"
    fi
}

# Generate summary email
generate_summary_email() {
    log_info "Generating email summary"
    
    EMAIL_FILE="${OUTPUT_DIR}/email_summary_${REPORT_DATE}.txt"
    
    cat > "${EMAIL_FILE}" << EOF
Subject: UX Research Report - ${REPORT_DATE}

Dear 1001 Stories Team,

The automated UX research system has generated a new report analyzing user feedback and behavior for the past ${TIMEFRAME}.

Key Highlights:
EOF

    if command -v jq &> /dev/null && [ -f "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json" ]; then
        TOTAL_FEEDBACK=$(jq -r '.summary.totalFeedback // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
        CRITICAL_ISSUES=$(jq -r '.summary.criticalIssues // 0' "${OUTPUT_DIR}/feedback_raw_${REPORT_DATE}.json")
        
        cat >> "${EMAIL_FILE}" << EOF
- Total feedback collected: ${TOTAL_FEEDBACK}
- Critical issues requiring attention: ${CRITICAL_ISSUES}
EOF
    fi

    cat >> "${EMAIL_FILE}" << EOF

Please review the full report at: ${OUTPUT_DIR}/ux_research_report_${REPORT_DATE}.md

This is an automated message from the UX Research System.
EOF

    log_success "Email summary generated: ${EMAIL_FILE}"
}

# Main execution
main() {
    log_info "Starting UX Research Report Generation"
    log_info "Timeframe: ${TIMEFRAME}"
    
    create_output_dir
    
    # Fetch data
    fetch_feedback_data
    fetch_analytics_data
    fetch_feature_usage_data
    
    # Generate reports
    generate_report
    generate_csv_exports
    generate_summary_email
    
    log_success "UX Research Report Generation Complete"
    log_info "Reports saved to: ${OUTPUT_DIR}"
    
    # List generated files
    echo ""
    log_info "Generated files:"
    ls -la "${OUTPUT_DIR}"/*"${REPORT_DATE}"*
}

# Error handling
trap 'log_error "Script failed on line $LINENO"' ERR

# Run main function
main "$@"