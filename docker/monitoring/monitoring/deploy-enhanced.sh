#!/bin/bash

# ============================================
# 1001 Stories Enhanced Deployment Script
# Î¨¥Ï§ëÎã® Î∞∞Ìè¨, Î∞±ÏóÖ, Î™®ÎãàÌÑ∞ÎßÅ Ìè¨Ìï®
# ============================================

set -e  # ÏóêÎü¨ Î∞úÏÉùÏãú Ïä§ÌÅ¨Î¶ΩÌä∏ Ï§ëÎã®

# Configuration
SERVER_IP="${SERVER_IP:-3.128.143.122}"
SERVER_USER="${SERVER_USER:-ubuntu}"
PEM_FILE="${PEM_FILE:-/Users/jihunkong/Downloads/1001project.pem}"
REPO_URL="${REPO_URL:-https://github.com/JihunKong/1001project.git}"
DEPLOY_PATH="${DEPLOY_PATH:-/home/ubuntu/1001-stories}"
DOMAIN="${DOMAIN:-1001stories.seedsofempowerment.org}"
BRANCH="${BRANCH:-feature/role-system-v2}"
BACKUP_PATH="/var/backups/1001stories"
LOG_FILE="/var/log/deployment.log"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Deployment metadata
DEPLOYMENT_ID="deploy-$(date +%Y%m%d-%H%M%S)"
START_TIME=$(date +%s)

# Î°úÍπÖ Ìï®Ïàò
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# ÏóêÎü¨ Ìï∏Îì§ÎßÅ Ìï®Ïàò
handle_error() {
    local error_line=$1
    log "${RED}ERROR: Deployment failed at line $error_line${NC}"
    send_notification "error" "Deployment failed at line $error_line" "$DEPLOYMENT_ID"
    cleanup_on_error
    exit 1
}

# ÏóêÎü¨ Ìä∏Îû© ÏÑ§Ï†ï
trap 'handle_error $LINENO' ERR

# ÏïåÎ¶º Ï†ÑÏÜ° Ìï®Ïàò
send_notification() {
    local status=$1
    local message=$2
    local deployment_id=${3:-""}
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Slack ÏïåÎ¶º (ÏõπÌõÖ URLÏù¥ ÏÑ§Ï†ïÎêú Í≤ΩÏö∞)
    if [ -n "${SLACK_WEBHOOK_URL:-}" ]; then
        local color="good"
        case $status in
            "error") color="danger" ;;
            "warning") color="warning" ;;
        esac
        
        curl -X POST -H 'Content-type: application/json' \
            --data "{
                \"attachments\": [{
                    \"color\": \"$color\",
                    \"title\": \"üöÄ 1001 Stories Deployment\",
                    \"text\": \"$message\",
                    \"fields\": [
                        {\"title\": \"Status\", \"value\": \"$status\", \"short\": true},
                        {\"title\": \"Deployment ID\", \"value\": \"$deployment_id\", \"short\": true},
                        {\"title\": \"Time\", \"value\": \"$timestamp\", \"short\": true},
                        {\"title\": \"Server\", \"value\": \"$SERVER_IP\", \"short\": true}
                    ]
                }]
            }" \
            "$SLACK_WEBHOOK_URL" >/dev/null 2>&1 || true
    fi
}

# Prerequisites ÌôïÏù∏
check_prerequisites() {
    log "${YELLOW}Checking prerequisites...${NC}"
    
    # PEM ÌååÏùº ÌôïÏù∏
    if [ ! -f "$PEM_FILE" ]; then
        log "${RED}Error: PEM file not found at $PEM_FILE${NC}"
        exit 1
    fi
    
    chmod 400 "$PEM_FILE"
    log "${GREEN}‚úì PEM file found and permissions set${NC}"
    
    # ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏
    if ! ssh -i "$PEM_FILE" -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
         "$SERVER_USER@$SERVER_IP" "echo 'Connection test successful'" > /dev/null 2>&1; then
        log "${RED}Error: Cannot connect to server $SERVER_IP${NC}"
        exit 1
    fi
    
    log "${GREEN}‚úì Server connection verified${NC}"
}

# ÏÇ¨Ï†Ñ Î∞∞Ìè¨ Î∞±ÏóÖ
pre_deployment_backup() {
    log "${YELLOW}Creating pre-deployment backup...${NC}"
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << EOF
        set -e
        
        # Î∞±ÏóÖ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        sudo mkdir -p $BACKUP_PATH
        
        # ÌòÑÏû¨ Î≤ÑÏ†Ñ Î∞±ÏóÖ
        if [ -d "$DEPLOY_PATH" ]; then
            sudo cp -r "$DEPLOY_PATH" "$BACKUP_PATH/backup-$DEPLOYMENT_ID"
            echo "‚úì Application backup created: $BACKUP_PATH/backup-$DEPLOYMENT_ID"
        fi
        
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î∞±ÏóÖ
        if command -v docker-compose >/dev/null 2>&1; then
            cd "$DEPLOY_PATH"
            if docker-compose ps | grep -q postgres; then
                docker-compose exec -T postgres pg_dump -U postgres 1001stories | \
                sudo tee "$BACKUP_PATH/db-backup-$DEPLOYMENT_ID.sql" > /dev/null
                echo "‚úì Database backup created: $BACKUP_PATH/db-backup-$DEPLOYMENT_ID.sql"
            fi
        fi
        
        # ÏóÖÎ°úÎìúÎêú ÌååÏùº Î∞±ÏóÖ
        if [ -d "$DEPLOY_PATH/public/books" ]; then
            sudo cp -r "$DEPLOY_PATH/public/books" "$BACKUP_PATH/books-backup-$DEPLOYMENT_ID"
            echo "‚úì Books backup created"
        fi
        
        # Ïò§ÎûòÎêú Î∞±ÏóÖ Ï†ïÎ¶¨ (7Ïùº Ïù¥ÏÉÅÎêú Î∞±ÏóÖ ÏÇ≠Ï†ú)
        find "$BACKUP_PATH" -name "backup-*" -mtime +7 -exec sudo rm -rf {} + 2>/dev/null || true
        find "$BACKUP_PATH" -name "db-backup-*" -mtime +7 -exec sudo rm -f {} + 2>/dev/null || true
        find "$BACKUP_PATH" -name "books-backup-*" -mtime +7 -exec sudo rm -rf {} + 2>/dev/null || true
EOF
    
    log "${GREEN}‚úì Pre-deployment backup completed${NC}"
}

# Ìó¨Ïä§Ï≤¥ÌÅ¨ Ìï®Ïàò
health_check() {
    local max_attempts=${1:-30}  # Í∏∞Î≥∏ 30Ìöå ÏãúÎèÑ (5Î∂Ñ)
    local attempt=0
    
    log "${YELLOW}Performing health check...${NC}"
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -f -s --max-time 5 "https://$DOMAIN/api/health" > /dev/null 2>&1; then
            log "${GREEN}‚úì Health check passed (attempt $((attempt + 1)))${NC}"
            return 0
        fi
        
        attempt=$((attempt + 1))
        if [ $attempt -lt $max_attempts ]; then
            log "${YELLOW}Health check failed, retrying in 10 seconds... (attempt $attempt/$max_attempts)${NC}"
            sleep 10
        fi
    done
    
    log "${RED}‚úó Health check failed after $max_attempts attempts${NC}"
    return 1
}

# Î¨¥Ï§ëÎã® Î∞∞Ìè¨ Ìï®Ïàò
zero_downtime_deploy() {
    log "${YELLOW}Starting zero-downtime deployment...${NC}"
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << EOF
        set -e
        
        cd "$DEPLOY_PATH"
        
        # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ≥¥ Ï†ÄÏû•
        docker-compose ps --services --filter "status=running" > /tmp/running_services.txt
        
        # Git ÏóÖÎç∞Ïù¥Ìä∏
        git fetch origin
        git checkout "$BRANCH"
        git pull origin "$BRANCH"
        
        # ÏùòÏ°¥ÏÑ± Î∞è Ïù¥ÎØ∏ÏßÄ ÏóÖÎç∞Ïù¥Ìä∏
        docker-compose build --pull --no-cache app
        
        # ÏÉà Ïù¥ÎØ∏ÏßÄÎ°ú rolling update ÏàòÌñâ
        docker-compose up -d --no-deps app
        
        # Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä ÏãúÏûëÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
        sleep 15
        
        # Ìó¨Ïä§Ï≤¥ÌÅ¨Î•º ÏúÑÌïú ÎÇ¥Î∂Ä Ìè¨Ìä∏ ÌôïÏù∏
        timeout 60s bash -c 'until curl -f http://localhost:3000/api/health > /dev/null 2>&1; do sleep 2; done' || {
            echo "Internal health check failed, rolling back..."
            exit 1
        }
        
        # Nginx ÏÑ§Ï†ï Î¶¨Î°úÎìú (Î¨¥Ï§ëÎã®)
        if docker-compose ps nginx | grep -q "Up"; then
            docker-compose exec nginx nginx -s reload || true
        fi
        
        echo "‚úì Zero-downtime deployment completed"
EOF
    
    log "${GREEN}‚úì Zero-downtime deployment completed${NC}"
}

# Ï†ÑÌÜµÏ†ÅÏù∏ Î∞∞Ìè¨ Ìï®Ïàò (Î∞±ÏóÖÏö©)
traditional_deploy() {
    log "${YELLOW}Starting traditional deployment...${NC}"
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << EOF
        set -e
        
        cd "$DEPLOY_PATH"
        
        # ÏÑúÎπÑÏä§ Ï§ëÏßÄ
        docker-compose down
        
        # Git ÏóÖÎç∞Ïù¥Ìä∏
        git fetch origin
        git checkout "$BRANCH"
        git pull origin "$BRANCH"
        
        # ÏóÖÎ°úÎìúÎêú ÌååÏùº Î≥µÍµ¨
        BOOKS_BACKUP="$BACKUP_PATH/books-backup-$DEPLOYMENT_ID"
        if [ -d "\$BOOKS_BACKUP" ]; then
            mkdir -p public/books
            cp -r "\$BOOKS_BACKUP"/* public/books/ 2>/dev/null || true
            chown -R \$USER:\$USER public/books
            chmod -R 755 public/books
            echo "‚úì Books restored from backup"
        fi
        
        # Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è ÏãúÏûë
        docker-compose build --no-cache
        docker-compose up -d
        
        echo "‚úì Traditional deployment completed"
EOF
    
    log "${GREEN}‚úì Traditional deployment completed${NC}"
}

# Î°§Î∞± Ìï®Ïàò
rollback() {
    local backup_id=${1:-""}
    
    if [ -z "$backup_id" ]; then
        # ÏµúÏã† Î∞±ÏóÖ Ï∞æÍ∏∞
        backup_id=$(ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" \
            "ls -t $BACKUP_PATH/backup-* 2>/dev/null | head -n1 | xargs basename" || echo "")
    fi
    
    if [ -z "$backup_id" ]; then
        log "${RED}Error: No backup found for rollback${NC}"
        exit 1
    fi
    
    log "${RED}Rolling back to backup: $backup_id${NC}"
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << EOF
        set -e
        
        # ÌòÑÏû¨ ÏÑúÎπÑÏä§ Ï§ëÏßÄ
        cd "$DEPLOY_PATH"
        docker-compose down || true
        
        # Î∞±ÏóÖÏóêÏÑú Î≥µÏõê
        if [ -d "$BACKUP_PATH/$backup_id" ]; then
            sudo rm -rf "$DEPLOY_PATH.old" 2>/dev/null || true
            sudo mv "$DEPLOY_PATH" "$DEPLOY_PATH.old" 2>/dev/null || true
            sudo cp -r "$BACKUP_PATH/$backup_id" "$DEPLOY_PATH"
            sudo chown -R $SERVER_USER:$SERVER_USER "$DEPLOY_PATH"
        else
            echo "Backup directory not found: $BACKUP_PATH/$backup_id"
            exit 1
        fi
        
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°§Î∞±
        DB_BACKUP="\$(echo $backup_id | sed 's/backup-/db-backup-/').sql"
        if [ -f "$BACKUP_PATH/\$DB_BACKUP" ]; then
            cd "$DEPLOY_PATH"
            docker-compose up -d postgres
            sleep 10
            cat "$BACKUP_PATH/\$DB_BACKUP" | docker-compose exec -T postgres psql -U postgres -d 1001stories
            echo "‚úì Database rolled back"
        fi
        
        # ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë
        docker-compose up -d
        
        echo "‚úì Rollback completed"
EOF
    
    log "${GREEN}‚úì Rollback completed to $backup_id${NC}"
    send_notification "warning" "Rollback completed to $backup_id" "$DEPLOYMENT_ID"
}

# Î∞∞Ìè¨ Ï†ïÎ≥¥ Í∏∞Î°ù
record_deployment() {
    local status=$1
    local duration=$(($(date +%s) - START_TIME))
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << EOF
        # Î∞∞Ìè¨ Î°úÍ∑∏ Í∏∞Î°ù
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Deployment $DEPLOYMENT_ID - Status: $status - Duration: ${duration}s - Branch: $BRANCH" | \
        sudo tee -a /var/log/deployments.log > /dev/null
        
        # Git Ïª§Î∞ã Ï†ïÎ≥¥ Í∏∞Î°ù
        if [ "$status" = "success" ]; then
            cd "$DEPLOY_PATH"
            git log -1 --pretty=format:"%H %s" | \
            sudo tee -a /var/log/deployments.log > /dev/null
        fi
EOF
}

# ÏóêÎü¨ Î∞úÏÉùÏãú Ï†ïÎ¶¨ ÏûëÏóÖ
cleanup_on_error() {
    log "${RED}Performing cleanup after error...${NC}"
    
    # Ïã§Ìå®Ìïú Î∞∞Ìè¨Ïùò Ï†ïÎ≥¥ Í∏∞Î°ù
    record_deployment "failed"
    
    # ÏûêÎèô Î°§Î∞± (ÏÑ§Ï†ïÎêú Í≤ΩÏö∞)
    if [ "${AUTO_ROLLBACK:-false}" = "true" ]; then
        log "${YELLOW}Auto-rollback is enabled, performing rollback...${NC}"
        rollback
    fi
}

# Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù
post_deployment_verification() {
    log "${YELLOW}Performing post-deployment verification...${NC}"
    
    # Ìó¨Ïä§Ï≤¥ÌÅ¨
    if ! health_check 30; then
        log "${RED}Post-deployment health check failed${NC}"
        return 1
    fi
    
    # Ï£ºÏöî ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌôïÏù∏
    local endpoints=(
        "/api/health"
        "/login"
        "/signup"
        "/dashboard/learner"
    )
    
    for endpoint in "${endpoints[@]}"; do
        if curl -f -s --max-time 10 "https://$DOMAIN$endpoint" > /dev/null; then
            log "${GREEN}‚úì Endpoint accessible: $endpoint${NC}"
        else
            log "${YELLOW}‚ö† Endpoint check failed: $endpoint${NC}"
        fi
    done
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌôïÏù∏
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << 'EOF'
        cd /home/ubuntu/1001-stories
        if docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
            echo "‚úì Database connection verified"
        else
            echo "‚ö† Database connection check failed"
        fi
EOF
    
    log "${GREEN}‚úì Post-deployment verification completed${NC}"
}

# Î©îÏù∏ Î∞∞Ìè¨ Ìï®Ïàò
main_deploy() {
    local deploy_type=${1:-"zero-downtime"}
    
    log "${BLUE}========================================${NC}"
    log "${BLUE}   Starting deployment: $DEPLOYMENT_ID   ${NC}"
    log "${BLUE}========================================${NC}"
    
    send_notification "info" "Deployment started" "$DEPLOYMENT_ID"
    
    # Prerequisites ÌôïÏù∏
    check_prerequisites
    
    # ÏÇ¨Ï†Ñ Î∞±ÏóÖ
    pre_deployment_backup
    
    # Î∞∞Ìè¨ Ïã§Ìñâ
    case $deploy_type in
        "zero-downtime")
            zero_downtime_deploy
            ;;
        "traditional")
            traditional_deploy
            ;;
        *)
            log "${RED}Unknown deployment type: $deploy_type${NC}"
            exit 1
            ;;
    esac
    
    # Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù
    if post_deployment_verification; then
        local duration=$(($(date +%s) - START_TIME))
        log "${GREEN}üéâ Deployment completed successfully! (Duration: ${duration}s)${NC}"
        record_deployment "success"
        send_notification "success" "Deployment completed successfully (${duration}s)" "$DEPLOYMENT_ID"
    else
        log "${RED}Post-deployment verification failed${NC}"
        record_deployment "failed"
        send_notification "error" "Post-deployment verification failed" "$DEPLOYMENT_ID"
        exit 1
    fi
}

# Î™®ÎãàÌÑ∞ÎßÅ ÏÑ§Ï†ï Î∞∞Ìè¨
deploy_monitoring() {
    log "${YELLOW}Deploying monitoring stack...${NC}"
    
    # Î™®ÎãàÌÑ∞ÎßÅ ÌååÏùºÎì§ÏùÑ ÏÑúÎ≤ÑÎ°ú Î≥µÏÇ¨
    scp -i "$PEM_FILE" -r monitoring/ "$SERVER_USER@$SERVER_IP:/tmp/monitoring/"
    
    ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" << 'EOF'
        set -e
        
        # Î™®ÎãàÌÑ∞ÎßÅ ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ
        sudo mkdir -p /opt/monitoring
        sudo cp -r /tmp/monitoring/* /opt/monitoring/
        sudo chown -R $USER:$USER /opt/monitoring
        
        # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
        cd /opt/monitoring
        if [ ! -f .env ]; then
            cat > .env << EOL
GRAFANA_PASSWORD=$(openssl rand -base64 32)
SMTP_HOST=smtp.gmail.com:587
SMTP_USER=${SMTP_USER:-}
SMTP_PASSWORD=${SMTP_PASSWORD:-}
SMTP_FROM=alerts@1001stories.org
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
EOL
        fi
        
        # Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÉù ÏãúÏûë
        docker-compose -f docker-compose.monitoring.yml up -d
        
        # Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º cronÏóê Îì±Î°ù
        chmod +x health-check.sh backup-database.sh
        
        # Í∏∞Ï°¥ cron ÏûëÏóÖ Ï†úÍ±∞
        crontab -l 2>/dev/null | grep -v "1001stories" | crontab - || true
        
        # ÏÉà cron ÏûëÏóÖ Ï∂îÍ∞Ä
        (crontab -l 2>/dev/null; cat << 'EOCRON'
# 1001 Stories Health Check - Îß§ 5Î∂ÑÎßàÎã§
*/5 * * * * /opt/monitoring/health-check.sh >> /var/log/health-check.log 2>&1

# 1001 Stories Database Backup - Îß§Ïùº ÏÉàÎ≤Ω 2Ïãú
0 2 * * * /opt/monitoring/backup-database.sh >> /var/log/backup.log 2>&1

# 1001 Stories Weekly Full Backup - Îß§Ï£º ÏùºÏöîÏùº ÏÉàÎ≤Ω 3Ïãú
0 3 * * 0 RESTORE_TEST=true /opt/monitoring/backup-database.sh >> /var/log/backup.log 2>&1
EOCRON
        ) | crontab -
        
        echo "‚úì Monitoring stack deployed and scheduled"
EOF
    
    log "${GREEN}‚úì Monitoring stack deployment completed${NC}"
}

# ÏÇ¨Ïö©Î≤ï Ï∂úÎ†•
show_help() {
    echo "Usage: $0 [OPTIONS] COMMAND"
    echo ""
    echo "Commands:"
    echo "  deploy [zero-downtime|traditional]  - Deploy application (default: zero-downtime)"
    echo "  rollback [backup-id]                - Rollback to previous version"
    echo "  monitoring                          - Deploy monitoring stack"
    echo "  logs [lines]                        - Show application logs"
    echo "  status                              - Show deployment status"
    echo "  cleanup                             - Clean old backups and images"
    echo ""
    echo "Environment variables:"
    echo "  SERVER_IP        - Target server IP"
    echo "  SERVER_USER      - SSH user (default: ubuntu)"
    echo "  PEM_FILE         - Path to PEM key file"
    echo "  BRANCH           - Git branch to deploy (default: feature/role-system-v2)"
    echo "  AUTO_ROLLBACK    - Auto rollback on failure (default: false)"
    echo "  SLACK_WEBHOOK_URL - Slack webhook for notifications"
}

# Î©îÏù∏ Ïã§Ìñâ Î°úÏßÅ
case "${1:-deploy}" in
    deploy)
        main_deploy "${2:-zero-downtime}"
        ;;
    rollback)
        rollback "$2"
        ;;
    monitoring)
        deploy_monitoring
        ;;
    logs)
        ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" \
            "cd $DEPLOY_PATH && docker-compose logs --tail=${2:-50}"
        ;;
    status)
        ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" \
            "cd $DEPLOY_PATH && docker-compose ps && echo && tail -10 /var/log/deployments.log"
        ;;
    cleanup)
        ssh -i "$PEM_FILE" "$SERVER_USER@$SERVER_IP" \
            "docker system prune -af --volumes && sudo find $BACKUP_PATH -mtime +30 -delete"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        exit 1
        ;;
esac