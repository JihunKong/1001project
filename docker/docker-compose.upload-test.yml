version: '3.8'

services:
  # Test database
  test-db:
    image: postgres:15
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password_123
      POSTGRES_DB: stories_test_db
    volumes:
      - ./tests/fixtures/init-test-db.sql:/docker-entrypoint-initdb.d/init.sql
      - test_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d stories_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test application
  test-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test_user:test_password_123@test-db:5432/stories_test_db
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=test-secret-key-for-uploads
      - UPLOAD_TEST_MODE=true
      - EMAIL_SERVER_HOST=mailhog
      - EMAIL_SERVER_PORT=1025
      - EMAIL_FROM=test@1001stories.org
      - SKIP_ENV_VALIDATION=true
    ports:
      - "3000:3000"
    depends_on:
      test-db:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      - .:/app
      - /app/node_modules
      - ./tests/fixtures/uploads:/app/test-uploads
      - upload_artifacts:/app/test-results
    command: ["npm", "run", "dev"]
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP
    networks:
      - test-network

  # Playwright test runner
  playwright:
    image: mcr.microsoft.com/playwright:v1.40.0-focal
    working_dir: /app
    environment:
      - NODE_ENV=test
      - CI=true
      - PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
      - UPLOAD_TEST_MODE=true
    depends_on:
      test-app:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - upload_artifacts:/app/test-results
      - ./tests:/app/tests
    networks:
      - test-network
    command: ["npx", "playwright", "test", "--config=playwright.config.upload.ts", "--reporter=html"]

  # File upload storage simulation
  upload-storage:
    image: nginx:alpine
    volumes:
      - upload_artifacts:/usr/share/nginx/html/uploads
      - ./nginx/upload-test.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    networks:
      - test-network

volumes:
  test_db_data:
  upload_artifacts:

networks:
  test-network:
    driver: bridge