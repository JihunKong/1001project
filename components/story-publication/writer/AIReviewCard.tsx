'use client';

import { useState, useEffect } from 'react';
import { Sparkles, Wand2, ChevronDown, ChevronUp, Loader2, Check } from 'lucide-react';

interface AIReview {
  id: string;
  reviewType: 'GRAMMAR' | 'STRUCTURE' | 'WRITING_HELP';
  feedback: any;
  suggestions: string[];
  score?: number | null;
  createdAt: string;
  isAutoGenerated?: boolean;
  triggerEvent?: string;
  status: string;
}

interface AIReviewCardProps {
  submissionId: string;
}

const REVIEW_TYPE_LABELS = {
  GRAMMAR: 'Grammar & Spelling',
  STRUCTURE: 'Story Structure',
  WRITING_HELP: 'Writing Tips'
};

export default function AIReviewCard({ submissionId }: AIReviewCardProps) {
  const [reviews, setReviews] = useState<AIReview[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [expandedReview, setExpandedReview] = useState<string | null>(null);

  useEffect(() => {
    fetchAutoReviews();
  }, [submissionId]);

  const fetchAutoReviews = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(`/api/text-submissions/${submissionId}/ai-reviews`);

      if (!response.ok) {
        throw new Error('Failed to fetch AI reviews');
      }

      const data = await response.json();
      setReviews(data.reviews || []);

      if (data.reviews && data.reviews.length > 0) {
        setExpandedReview(data.reviews[0].id);
      }
    } catch (err) {
      console.error('Error fetching AI reviews:', err);
      setError(err instanceof Error ? err.message : 'Failed to load AI reviews');
    } finally {
      setIsLoading(false);
    }
  };

  const completedReviews = reviews.filter(r => r.status === 'COMPLETED');
  const hasAutoReviews = completedReviews.some(r => r.isAutoGenerated);

  if (isLoading) {
    return (
      <div className="bg-white border border-[#E5E5EA] rounded-lg p-6">
        <div className="flex items-center justify-center gap-2 py-4">
          <Loader2 className="h-5 w-5 text-[#5951E7] animate-spin" />
          <span className="text-[#8E8E93]" style={{
            fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
            fontSize: '14px'
          }}>
            Loading AI feedback...
          </span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-white border border-[#E5E5EA] rounded-lg p-6">
        <div className="bg-red-50 border border-red-200 rounded-md p-3">
          <p className="text-sm text-red-700">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white border border-[#E5E5EA] rounded-lg p-6">
      <div className="flex flex-col gap-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Sparkles className="h-6 w-6 text-[#5951E7]" />
            <h3 style={{
              fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
              fontSize: '20px',
              fontWeight: 500,
              lineHeight: '1.221',
              color: '#141414'
            }}>
              AI Feedback
            </h3>
          </div>
          {hasAutoReviews && (
            <div className="bg-[#EEF2FF] px-3 py-1 rounded-full flex items-center gap-1">
              <Check className="h-4 w-4 text-[#5951E7]" />
              <span style={{
                fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                fontSize: '12px',
                fontWeight: 500,
                color: '#5951E7'
              }}>
                Auto-generated
              </span>
            </div>
          )}
        </div>

        <p style={{
          fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
          fontSize: '16px',
          fontWeight: 400,
          lineHeight: '1.193',
          color: '#8E8E93'
        }}>
          Your draft has been automatically reviewed. Check the feedback below to improve your story.
        </p>

        {completedReviews.length === 0 ? (
          <div className="bg-[#F9FAFB] rounded-md p-6 text-center">
            <Sparkles className="h-12 w-12 text-[#8E8E93] mx-auto mb-3" />
            <p style={{
              fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
              fontSize: '14px',
              color: '#8E8E93'
            }}>
              AI feedback will appear here after you save your draft.
            </p>
          </div>
        ) : (
          <div className="flex flex-col gap-3">
            {completedReviews.map((review) => (
              <div key={review.id} className="border border-[#E5E5EA] rounded-lg overflow-hidden">
                <button
                  onClick={() => setExpandedReview(expandedReview === review.id ? null : review.id)}
                  className="w-full bg-white hover:bg-[#F9FAFB] py-3 px-4 transition-colors flex items-center justify-between"
                >
                  <div className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-[#5951E7]" />
                    <span style={{
                      fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                      fontSize: '16px',
                      fontWeight: 500,
                      lineHeight: '1.221',
                      color: '#141414'
                    }}>
                      {REVIEW_TYPE_LABELS[review.reviewType]}
                    </span>
                    {review.score !== undefined && review.score !== null && (
                      <span style={{
                        fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                        fontSize: '14px',
                        fontWeight: 500,
                        color: review.score >= 80 ? '#065F46' : review.score >= 60 ? '#92400E' : '#C2410C'
                      }}>
                        ({review.score}/100)
                      </span>
                    )}
                  </div>
                  {expandedReview === review.id ? (
                    <ChevronUp className="h-5 w-5 text-[#5951E7]" />
                  ) : (
                    <ChevronDown className="h-5 w-5 text-[#5951E7]" />
                  )}
                </button>

                {expandedReview === review.id && (
                  <div className="bg-[#F9FAFB] p-4 border-t border-[#E5E5EA]">
                    {review.feedback?.summary && (
                      <div className="mb-4">
                        <h4 style={{
                          fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                          fontSize: '14px',
                          fontWeight: 500,
                          color: '#141414',
                          marginBottom: '8px'
                        }}>
                          Summary
                        </h4>
                        <p style={{
                          fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                          fontSize: '14px',
                          lineHeight: '1.5',
                          color: '#141414'
                        }}>
                          {review.feedback.summary}
                        </p>
                      </div>
                    )}

                    {review.feedback?.strengths && review.feedback.strengths.length > 0 && (
                      <div className="mb-4">
                        <h4 style={{
                          fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                          fontSize: '14px',
                          fontWeight: 500,
                          color: '#065F46',
                          marginBottom: '8px'
                        }}>
                          Strengths
                        </h4>
                        <ul className="space-y-2">
                          {review.feedback.strengths.map((strength: string, index: number) => (
                            <li
                              key={index}
                              className="text-sm pl-4 relative before:content-['✓'] before:absolute before:left-0 before:text-[#065F46]"
                              style={{
                                fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                                fontSize: '14px',
                                lineHeight: '1.5',
                                color: '#141414'
                              }}
                            >
                              {strength}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {review.suggestions && review.suggestions.length > 0 && (
                      <div className="mb-4">
                        <h4 style={{
                          fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                          fontSize: '14px',
                          fontWeight: 500,
                          color: '#92400E',
                          marginBottom: '8px'
                        }}>
                          Suggestions for Improvement
                        </h4>
                        <ul className="space-y-2">
                          {review.suggestions.map((suggestion, index) => (
                            <li
                              key={index}
                              className="text-sm pl-4 relative before:content-['→'] before:absolute before:left-0 before:text-[#5951E7]"
                              style={{
                                fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif',
                                fontSize: '14px',
                                lineHeight: '1.5',
                                color: '#141414'
                              }}
                            >
                              {suggestion}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    <p className="text-xs text-[#AEAEB2] mt-4" style={{
                      fontFamily: '"Helvetica Neue", -apple-system, system-ui, sans-serif'
                    }}>
                      Generated {new Date(review.createdAt).toLocaleString()}
                    </p>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
